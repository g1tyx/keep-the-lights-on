{"version":3,"sources":["lib/Generators.ts","lib/SerializeableBigNumber.ts","lib/Researchers.ts","lib/ResearchProjects.ts","lib/CurrentStatistics.ts","store/store.ts","store/gameSlice.ts","store/hooks.ts","layout/SummaryPane.tsx","components/AchievementsTab.tsx","components/GenerationTab.tsx","components/ResearchTab.tsx","components/SettingsTab/ColorModeSwitcher.tsx","lib/gameStateSaves.ts","components/SettingsTab/ExportedGameState.tsx","components/SettingsTab/ImportGameState.tsx","components/SettingsTab/ManualSaveButton.tsx","components/SettingsTab.tsx","layout/ContentPane.tsx","components/GameAutosaver.tsx","layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["GeneratorType","toDecimal","serialized","Decimal","fromMantissaExponent","man","exp","serializeNumber","value","decimalValue","mantissa","exponent","add","a","b","subtract","multiply","divide","max","min","compare","formatStandardNumber","maxDecimalPlaces","decimal","lt","trunc","eq","toFixed","toExponential","formatMoney","withoutCentsForWholeAmounts","ResearcherType","generatorDescriptions","hamsters","name","colorText","baseCost","costOfNthGenerator","n","pinwheels","bicycle","generatorTypes","Object","keys","sort","defaultGeneratorsState","numberOwned","wattsPerDay","nextPurchaseCost","canPurchaseGenerator","cashAvailable","generator","ResearchProjectType","researcherDescriptions","juniorResearchAssistant","costOfNthResearcher","researchAssistant","researcherTypes","defaultResearchersState","numberEmployed","ideasPerDay","canPurchaseResearcher","researcher","defaultCurrentStatistics","daysElapsed","ticksPerDay","maxCashAvailable","totalCashEarned","cashEarnedPerDay","homesPowered","homesInPowerGrid","wattsUsedPerHomePerDay","pricePerWatt","wattsGeneratedPerDay","totalWattsSold","ideasAvailable","maxIdeasAvailable","totalIdeasGenerated","ideasGeneratedPerDay","getWattsConsumedPerTick","currentStatistics","wattsConsumedPerDay","getNextCurrentStatistics","tickCounter","getNextDaysElapsed","cashEarnedPerTick","getCashEarnedPerTick","ideasPerTick","getIdeasPerTick","updateCachedStatistics","generators","researchersState","researchers","values","reduce","acc","calculateWattsGenerated","makePurchase","purchaseCost","preloadedState","researchProjects","identifier","expandGrid1","description","cost","requiresResearchProjects","applyResearch","state","expandGrid2","hasRequiredResearchProjects","researchProject","purchasedResearchProjects","purchasedSet","Set","every","rp","has","canPurchaseResearchProject","initialState","gameSlice","createSlice","reducers","tick","action","payload","updateTicksPerDay","buyGenerator","generatorType","purchaseGenerator","buyResearcher","researcherType","purchaseResearcher","purchaseResearchProject","find","project","push","resetGame","actions","selectGameState","game","selectGenerators","selectResearchers","selectTicksPerDay","selectCurrentStatistics","selectCashAvailable","selectMaxCashAvailable","selectIdeasAvailable","selectMaxIdeasAvailable","selectPurchasedResearchProjects","selectMaxCollected","selectTotalCollected","useAppDispatch","useDispatch","useAppSelector","useSelector","SummaryPane","props","percentOfHomesPowered","as","size","pb","pt","align","spacing","fontSize","color","undefined","AchievementsTab","maxCollected","totalCollected","columns","spacingX","fontWeight","GenerationTab","dispatch","map","generatorDescription","onClick","disabled","minimumResearcherCost","ResearchTab","fontStyle","researcherDescription","includes","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","leftIcon","serializeGameState","gameState","btoa","JSON","stringify","deserializeGameState","serializedState","parse","atob","e","saveGameState","localStorage","setItem","chakra","useState","exportedGameState","setExportedGameState","useClipboard","hasCopied","onCopy","useEffect","position","readOnly","height","variant","colorScheme","textTransform","zIndex","top","right","setValue","toast","useToast","onChange","event","target","mt","window","confirm","parsedValue","title","status","duration","isClosable","ManualSaveButton","SettingsTab","showExportedGameState","setShowExportedGameState","showImportGameState","setShowImportGameState","process","ContentPane","preloadedGameState","savedState","getItem","loadGameState","store","configureStore","reducer","setInterval","GameAutosaver","useInterval","App","theme","minH","direction","alignItems","overflow","w","p","orientation","flexGrow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66e4a538.chunk.js","sourcesContent":["import { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum GeneratorType {\n  hamsters = \"hamsters\",\n  pinwheels = \"pinwheels\",\n  bicycle = \"bicycle\",\n}\n\nexport type GeneratorDescription = {\n  name: string;\n  colorText: string;\n  baseCost: SerializeableBigNumber;\n  costOfNthGenerator: (n: number) => SerializeableBigNumber;\n};\n\nexport type GeneratorDescriptions = {\n  [key in GeneratorType]: GeneratorDescription;\n};\n\nexport const generatorDescriptions: GeneratorDescriptions = {\n  hamsters: {\n    name: \"Hamster\",\n    colorText: \"Watch those little legs go!\",\n    baseCost: serializeNumber(0.25),\n    costOfNthGenerator: (n) => serializeNumber(n * 0.25),\n  },\n  pinwheels: {\n    name: \"Pinwheel\",\n    colorText: \"One day you'll build a great wind farm.\",\n    baseCost: serializeNumber(2),\n    costOfNthGenerator: (n) => serializeNumber(n * 2),\n  },\n  bicycle: {\n    name: \"Human-powered Bicycle\",\n    colorText: \"You can make it up the hill, just keep pedaling!\",\n    baseCost: serializeNumber(20),\n    costOfNthGenerator: (n) => serializeNumber((n - 1) * 5 + 20),\n  },\n};\n\nexport const generatorTypes = Object.keys(GeneratorType).sort((a, b) =>\n  compare(generatorDescriptions[a as GeneratorType].baseCost, generatorDescriptions[b as GeneratorType].baseCost),\n) as Array<GeneratorType>;\n\nexport type GeneratorState = {\n  numberOwned: number;\n  wattsPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type GeneratorsState = {\n  [key in GeneratorType]: GeneratorState;\n};\n\nexport const defaultGeneratorsState: GeneratorsState = {\n  hamsters: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(0.5),\n    nextPurchaseCost: generatorDescriptions.hamsters.baseCost,\n  },\n  pinwheels: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(2),\n    nextPurchaseCost: generatorDescriptions.pinwheels.baseCost,\n  },\n  bicycle: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(10),\n    nextPurchaseCost: generatorDescriptions.pinwheels.baseCost,\n  },\n};\n\nexport const canPurchaseGenerator = (cashAvailable: SerializeableBigNumber, generator: GeneratorState): boolean =>\n  compare(cashAvailable, generator.nextPurchaseCost) !== -1;\n\nexport const purchaseGenerator = (generatorType: GeneratorType, generator: GeneratorState): GeneratorState => {\n  const { numberOwned } = generator;\n\n  const nextPurchaseCost = generatorDescriptions[generatorType].costOfNthGenerator(numberOwned + 2);\n\n  return {\n    ...generator,\n    numberOwned: numberOwned + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateWattsGenerated = (generators: GeneratorsState): SerializeableBigNumber =>\n  Object.values(generators).reduce(\n    (acc, generator) => add(acc, multiply(serializeNumber(generator.numberOwned), generator.wattsPerDay)),\n    serializeNumber(0),\n  );\n","import Decimal, { DecimalSource } from \"break_infinity.js\";\n\nexport type SerializeableBigNumber = {\n  man: number;\n  exp: number;\n};\n\nconst toDecimal = (serialized: SerializeableBigNumber): Decimal =>\n  Decimal.fromMantissaExponent(serialized.man, serialized.exp);\n\nexport const serializeNumber = (value: DecimalSource): SerializeableBigNumber => {\n  const decimalValue = new Decimal(value);\n\n  return {\n    man: decimalValue.mantissa,\n    exp: decimalValue.exponent,\n  };\n};\n\nexport const add = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.add(toDecimal(a), toDecimal(b)));\n\nexport const subtract = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.subtract(toDecimal(a), toDecimal(b)));\n\nexport const multiply = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.multiply(toDecimal(a), toDecimal(b)));\n\nexport const divide = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.divide(toDecimal(a), toDecimal(b)));\n\nexport const max = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.max(toDecimal(a), toDecimal(b)));\n\nexport const min = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.min(toDecimal(a), toDecimal(b)));\n\nexport const compare = (a: SerializeableBigNumber, b: SerializeableBigNumber): number =>\n  Decimal.compare(toDecimal(a), toDecimal(b));\n\nexport const formatSerializeableBigNumber = (a: SerializeableBigNumber): string => toDecimal(a).toString();\n\nexport const formatStandardNumber = (a: SerializeableBigNumber, maxDecimalPlaces: number = 1): string => {\n  const decimal = toDecimal(a);\n\n  if (decimal.lt(new Decimal(10000))) {\n    if (decimal.trunc().eq(decimal)) {\n      return decimal.toFixed(0);\n    } else {\n      return decimal.toFixed(maxDecimalPlaces);\n    }\n  } else {\n    return decimal.toExponential(3);\n  }\n};\n\nexport const formatMoney = (a: SerializeableBigNumber, withoutCentsForWholeAmounts: boolean = false): string => {\n  const decimal = toDecimal(a);\n\n  if (decimal.lt(new Decimal(1000))) {\n    if (withoutCentsForWholeAmounts && decimal.trunc().eq(decimal)) {\n      return decimal.toFixed(0);\n    } else {\n      return decimal.toFixed(2);\n    }\n  } else {\n    return decimal.toExponential(3);\n  }\n};\n","import { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum ResearcherType {\n  juniorResearchAssistant = \"juniorResearchAssistant\",\n  researchAssistant = \"researchAssistant\",\n}\n\nexport type ResearcherDescription = {\n  name: string;\n  colorText: string;\n  baseCost: SerializeableBigNumber;\n  costOfNthResearcher: (n: number) => SerializeableBigNumber;\n};\n\nexport type ResearcherDescriptions = {\n  [key in ResearcherType]: ResearcherDescription;\n};\n\nexport const researcherDescriptions: ResearcherDescriptions = {\n  juniorResearchAssistant: {\n    name: \"Junior Research Assistant\",\n    colorText: \"Maybe recruiting your 12 year old cousin wasn't the best idea.\",\n    baseCost: serializeNumber(5),\n    costOfNthResearcher: (n) => serializeNumber(n * 2 + 3),\n  },\n  researchAssistant: {\n    name: \"Research Assistant\",\n    colorText: \"The honors students from your high school are interested in your project. They might be helpful.\",\n    baseCost: serializeNumber(25),\n    costOfNthResearcher: (n) => serializeNumber(n * 10 + 15),\n  },\n};\n\nexport const researcherTypes = Object.keys(ResearcherType).sort((a, b) =>\n  compare(researcherDescriptions[a as ResearcherType].baseCost, researcherDescriptions[b as ResearcherType].baseCost),\n) as Array<ResearcherType>;\n\nexport type ResearcherState = {\n  numberEmployed: number;\n  ideasPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type ResearchersState = {\n  [key in ResearcherType]: ResearcherState;\n};\n\nexport const defaultResearchersState: ResearchersState = {\n  juniorResearchAssistant: {\n    numberEmployed: 0,\n    ideasPerDay: serializeNumber(0.5),\n    nextPurchaseCost: researcherDescriptions.juniorResearchAssistant.baseCost,\n  },\n  researchAssistant: {\n    numberEmployed: 0,\n    ideasPerDay: serializeNumber(3),\n    nextPurchaseCost: researcherDescriptions.researchAssistant.baseCost,\n  },\n};\n\nexport const canPurchaseResearcher = (cashAvailable: SerializeableBigNumber, researcher: ResearcherState): boolean =>\n  compare(cashAvailable, researcher.nextPurchaseCost) !== -1;\n\nexport const purchaseResearcher = (researcherType: ResearcherType, researcher: ResearcherState): ResearcherState => {\n  const { numberEmployed } = researcher;\n\n  const nextPurchaseCost = researcherDescriptions[researcherType].costOfNthResearcher(numberEmployed + 2);\n\n  return {\n    ...researcher,\n    numberEmployed: numberEmployed + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateIdeasCreated = (researchers: ResearchersState): SerializeableBigNumber =>\n  Object.values(researchers).reduce(\n    (acc, researcher) => add(acc, multiply(serializeNumber(researcher.numberEmployed), researcher.ideasPerDay)),\n    serializeNumber(0),\n  );\n","import { GameState } from \"../store/gameSlice\";\nimport { compare, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum ResearchProjectType {\n  expandGrid1 = \"expandGrid1\",\n  expandGrid2 = \"expandGrid2\",\n}\n\nexport type ResearchProjectDescription = {\n  identifier: ResearchProjectType;\n  name: string;\n  description: string;\n  cost: SerializeableBigNumber;\n  requiresResearchProjects: Array<ResearchProjectType>;\n  applyResearch: (state: GameState) => GameState;\n};\n\nexport const researchProjects: Array<ResearchProjectDescription> = [\n  {\n    identifier: ResearchProjectType.expandGrid1,\n    name: \"Power the Street\",\n    description: \"Expand your power grid to provide power to your whole street\",\n    cost: serializeNumber(100),\n    requiresResearchProjects: [],\n    applyResearch: (state) => {\n      state.currentStatistics.homesInPowerGrid = serializeNumber(10);\n      return state;\n    },\n  },\n  {\n    identifier: ResearchProjectType.expandGrid2,\n    name: \"Power the Neighborhood\",\n    description: \"Expand your power grid to provide power to your whole street\",\n    cost: serializeNumber(2000),\n    requiresResearchProjects: [ResearchProjectType.expandGrid1],\n    applyResearch: (state) => {\n      state.currentStatistics.homesInPowerGrid = serializeNumber(100);\n      return state;\n    },\n  },\n];\n\nexport const hasRequiredResearchProjects = (\n  researchProject: ResearchProjectDescription,\n  purchasedResearchProjects: Array<ResearchProjectType>,\n): boolean => {\n  const purchasedSet = new Set(purchasedResearchProjects);\n  return researchProject.requiresResearchProjects.every((rp) => purchasedSet.has(rp));\n};\n\nexport const canPurchaseResearchProject = (\n  ideasAvailable: SerializeableBigNumber,\n  researchProject: ResearchProjectDescription,\n  purchasedResearchProjects: Array<ResearchProjectType>,\n): boolean => {\n  if (compare(ideasAvailable, researchProject.cost) === -1) {\n    return false;\n  }\n  return hasRequiredResearchProjects(researchProject, purchasedResearchProjects);\n};\n","import { calculateWattsGenerated, GeneratorsState } from \"./Generators\";\nimport { calculateIdeasCreated, ResearchersState } from \"./Researchers\";\nimport {\n  SerializeableBigNumber,\n  serializeNumber,\n  add,\n  multiply,\n  divide,\n  min,\n  max,\n  subtract,\n} from \"./SerializeableBigNumber\";\n\nexport type CurrentStatistics = {\n  daysElapsed: SerializeableBigNumber;\n  ticksPerDay: number;\n\n  cashAvailable: SerializeableBigNumber;\n  maxCashAvailable: SerializeableBigNumber;\n  totalCashEarned: SerializeableBigNumber;\n  cashEarnedPerDay: SerializeableBigNumber;\n\n  homesPowered: SerializeableBigNumber;\n  homesInPowerGrid: SerializeableBigNumber;\n  wattsUsedPerHomePerDay: SerializeableBigNumber;\n\n  pricePerWatt: SerializeableBigNumber;\n  wattsGeneratedPerDay: SerializeableBigNumber;\n  totalWattsSold: SerializeableBigNumber;\n\n  ideasAvailable: SerializeableBigNumber;\n  maxIdeasAvailable: SerializeableBigNumber;\n  totalIdeasGenerated: SerializeableBigNumber;\n  ideasGeneratedPerDay: SerializeableBigNumber;\n};\n\nexport const defaultCurrentStatistics: CurrentStatistics = {\n  daysElapsed: serializeNumber(0),\n  ticksPerDay: 16,\n\n  cashAvailable: serializeNumber(1),\n  maxCashAvailable: serializeNumber(0),\n  totalCashEarned: serializeNumber(0),\n  cashEarnedPerDay: serializeNumber(0),\n\n  homesPowered: serializeNumber(0),\n  homesInPowerGrid: serializeNumber(1),\n  wattsUsedPerHomePerDay: serializeNumber(20),\n\n  pricePerWatt: serializeNumber(0.03),\n  wattsGeneratedPerDay: serializeNumber(0),\n  totalWattsSold: serializeNumber(0),\n\n  ideasAvailable: serializeNumber(0),\n  maxIdeasAvailable: serializeNumber(0),\n  totalIdeasGenerated: serializeNumber(0),\n  ideasGeneratedPerDay: serializeNumber(0),\n};\n\nconst getNextDaysElapsed = (currentStatistics: CurrentStatistics, tickCounter: number): SerializeableBigNumber => {\n  const { daysElapsed, ticksPerDay } = currentStatistics;\n\n  if (tickCounter % ticksPerDay === 0) {\n    return add(daysElapsed, serializeNumber(1));\n  } else {\n    return daysElapsed;\n  }\n};\n\nconst getWattsConsumedPerTick = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { ticksPerDay, homesInPowerGrid, wattsUsedPerHomePerDay, wattsGeneratedPerDay } = currentStatistics;\n\n  const wattsConsumedPerDay = min(wattsGeneratedPerDay, multiply(homesInPowerGrid, wattsUsedPerHomePerDay));\n\n  return divide(wattsConsumedPerDay, serializeNumber(ticksPerDay));\n};\n\nconst getCashEarnedPerTick = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { pricePerWatt } = currentStatistics;\n\n  return multiply(getWattsConsumedPerTick(currentStatistics), pricePerWatt);\n};\n\nconst getIdeasPerTick = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { ticksPerDay, ideasGeneratedPerDay } = currentStatistics;\n\n  return divide(ideasGeneratedPerDay, serializeNumber(ticksPerDay));\n};\n\nexport const getNextCurrentStatistics = (\n  currentStatistics: CurrentStatistics,\n  tickCounter: number,\n): CurrentStatistics => {\n  const daysElapsed = getNextDaysElapsed(currentStatistics, tickCounter);\n\n  const cashEarnedPerTick = getCashEarnedPerTick(currentStatistics);\n  const cashAvailable = add(currentStatistics.cashAvailable, cashEarnedPerTick);\n  const totalCashEarned = add(currentStatistics.totalCashEarned, cashEarnedPerTick);\n  const maxCashAvailable = max(cashAvailable, currentStatistics.maxCashAvailable);\n\n  const ideasPerTick = getIdeasPerTick(currentStatistics);\n  const ideasAvailable = add(currentStatistics.ideasAvailable, ideasPerTick);\n  const totalIdeasGenerated = add(currentStatistics.totalIdeasGenerated, ideasPerTick);\n  const maxIdeasAvailable = max(ideasAvailable, currentStatistics.maxIdeasAvailable);\n\n  const totalWattsSold = add(currentStatistics.totalWattsSold, getWattsConsumedPerTick(currentStatistics));\n\n  return {\n    ...currentStatistics,\n    daysElapsed,\n    cashAvailable,\n    maxCashAvailable,\n    totalCashEarned,\n    ideasAvailable,\n    maxIdeasAvailable,\n    totalIdeasGenerated,\n    totalWattsSold,\n  };\n};\n\nexport const updateCachedStatistics = (\n  currentStatistics: CurrentStatistics,\n  generators: GeneratorsState,\n  researchersState: ResearchersState,\n) => {\n  const wattsGeneratedPerDay = calculateWattsGenerated(generators);\n  const wattsConsumedPerDay = min(\n    wattsGeneratedPerDay,\n    multiply(currentStatistics.homesInPowerGrid, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const cashEarnedPerDay = multiply(wattsConsumedPerDay, currentStatistics.pricePerWatt);\n  const homesPowered = min(\n    currentStatistics.homesInPowerGrid,\n    divide(wattsGeneratedPerDay, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const ideasGeneratedPerDay = calculateIdeasCreated(researchersState);\n\n  return { ...currentStatistics, cashEarnedPerDay, homesPowered, wattsGeneratedPerDay, ideasGeneratedPerDay };\n};\n\nexport const makePurchase = (\n  currentStatistics: CurrentStatistics,\n  purchaseCost: SerializeableBigNumber,\n): CurrentStatistics => {\n  const cashAvailable = subtract(currentStatistics.cashAvailable, purchaseCost);\n  currentStatistics.cashAvailable = cashAvailable;\n  return currentStatistics;\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { loadGameState } from \"../lib/gameStateSaves\";\nimport { gameSlice, tick } from \"./gameSlice\";\n\nconst TICKS_PER_SECOND = 16;\n\nconst preloadedGameState = loadGameState();\n\nlet preloadedState;\nif (preloadedGameState) {\n  preloadedState = {\n    game: preloadedGameState,\n  };\n}\n\nconst store = configureStore({\n  preloadedState,\n  reducer: {\n    game: gameSlice.reducer,\n  },\n});\n\nlet tickCounter = 0;\nsetInterval(() => {\n  store.dispatch(tick(tickCounter));\n  tickCounter = (tickCounter + 1) % TICKS_PER_SECOND;\n}, 1000 / TICKS_PER_SECOND);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  getNextCurrentStatistics,\n  CurrentStatistics,\n  defaultCurrentStatistics,\n  updateCachedStatistics,\n  makePurchase,\n} from \"../lib/CurrentStatistics\";\nimport {\n  canPurchaseGenerator,\n  defaultGeneratorsState,\n  GeneratorsState,\n  GeneratorType,\n  purchaseGenerator,\n} from \"../lib/Generators\";\nimport {\n  canPurchaseResearcher,\n  defaultResearchersState,\n  purchaseResearcher,\n  ResearchersState,\n  ResearcherType,\n} from \"../lib/Researchers\";\nimport { canPurchaseResearchProject, researchProjects, ResearchProjectType } from \"../lib/ResearchProjects\";\nimport { subtract } from \"../lib/SerializeableBigNumber\";\nimport { RootState } from \"./store\";\n\nexport interface GameState {\n  currentStatistics: CurrentStatistics;\n  generators: GeneratorsState;\n  researchers: ResearchersState;\n  purchasedResearchProjects: Array<ResearchProjectType>;\n}\n\nconst initialState: GameState = {\n  currentStatistics: defaultCurrentStatistics,\n  generators: defaultGeneratorsState,\n  researchers: defaultResearchersState,\n  purchasedResearchProjects: [],\n};\n\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    tick: (state, action: PayloadAction<number>) => {\n      state.currentStatistics = getNextCurrentStatistics(state.currentStatistics, action.payload);\n    },\n\n    updateTicksPerDay: (state, action: PayloadAction<number>) => {\n      state.currentStatistics.ticksPerDay = action.payload;\n    },\n\n    buyGenerator: (state, action: PayloadAction<GeneratorType>) => {\n      const generatorType = action.payload;\n\n      const { currentStatistics, generators, researchers } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const generator = generators[generatorType];\n\n      if (canPurchaseGenerator(cashAvailable, generator)) {\n        const purchaseCost = generator.nextPurchaseCost;\n\n        state.generators[generatorType] = purchaseGenerator(generatorType, generator);\n        state.currentStatistics = makePurchase(currentStatistics, purchaseCost);\n        state.currentStatistics = updateCachedStatistics(currentStatistics, generators, researchers);\n      }\n    },\n\n    buyResearcher: (state, action: PayloadAction<ResearcherType>) => {\n      const researcherType = action.payload;\n\n      const { currentStatistics, generators, researchers } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const researcher = researchers[researcherType];\n\n      if (canPurchaseResearcher(cashAvailable, researcher)) {\n        const purchaseCost = researcher.nextPurchaseCost;\n\n        state.researchers[researcherType] = purchaseResearcher(researcherType, researcher);\n        state.currentStatistics = makePurchase(currentStatistics, purchaseCost);\n        state.currentStatistics = updateCachedStatistics(currentStatistics, generators, researchers);\n      }\n    },\n\n    purchaseResearchProject: (state, action: PayloadAction<ResearchProjectType>) => {\n      const researchProject = researchProjects.find((project) => project.identifier === action.payload);\n\n      if (\n        researchProject &&\n        canPurchaseResearchProject(\n          state.currentStatistics.ideasAvailable,\n          researchProject,\n          state.purchasedResearchProjects,\n        )\n      ) {\n        state = researchProject.applyResearch(state);\n        state.currentStatistics.ideasAvailable = subtract(state.currentStatistics.ideasAvailable, researchProject.cost);\n        state.purchasedResearchProjects.push(action.payload);\n      }\n    },\n\n    resetGame: (state, action: PayloadAction<GameState | undefined>) => {\n      if (action.payload) {\n        return action.payload;\n      }\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  tick,\n  buyGenerator,\n  buyResearcher,\n  purchaseResearchProject,\n  updateTicksPerDay,\n  resetGame,\n} = gameSlice.actions;\n\nexport const selectGameState = (state: RootState) => state.game;\n\nexport const selectGenerators = (state: RootState) => state.game.generators;\nexport const selectResearchers = (state: RootState) => state.game.researchers;\n\nexport const selectTicksPerDay = (state: RootState) => state.game.currentStatistics.ticksPerDay;\n\nexport const selectCurrentStatistics = (state: RootState) => state.game.currentStatistics;\nexport const selectCashAvailable = (state: RootState) => state.game.currentStatistics.cashAvailable;\nexport const selectMaxCashAvailable = (state: RootState) => state.game.currentStatistics.maxCashAvailable;\n\nexport const selectIdeasAvailable = (state: RootState) => state.game.currentStatistics.ideasAvailable;\nexport const selectMaxIdeasAvailable = (state: RootState) => state.game.currentStatistics.maxIdeasAvailable;\nexport const selectPurchasedResearchProjects = (state: RootState) => state.game.purchasedResearchProjects;\n\nexport const selectMaxCollected = (state: RootState) => ({\n  maxCashAvailable: state.game.currentStatistics.maxCashAvailable,\n  maxIdeasAvailable: state.game.currentStatistics.maxIdeasAvailable,\n});\n\nexport const selectTotalCollected = (state: RootState) => ({\n  totalCashEarned: state.game.currentStatistics.totalCashEarned,\n  totalIdeasGenerated: state.game.currentStatistics.totalIdeasGenerated,\n  totalWattsSold: state.game.currentStatistics.totalWattsSold,\n});\n\nexport default gameSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { divide, multiply, serializeNumber, formatStandardNumber, formatMoney } from \"../lib/SerializeableBigNumber\";\nimport { selectCurrentStatistics } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst SummaryPane: React.FunctionComponent<Props> = (props) => {\n  const currentStatistics = useAppSelector(selectCurrentStatistics);\n\n  const {\n    daysElapsed,\n    cashAvailable,\n    cashEarnedPerDay,\n    homesPowered,\n    homesInPowerGrid,\n    wattsUsedPerHomePerDay,\n    pricePerWatt,\n    wattsGeneratedPerDay,\n    ideasAvailable,\n    ideasGeneratedPerDay,\n  } = currentStatistics;\n\n  const percentOfHomesPowered = multiply(serializeNumber(100), divide(homesPowered, homesInPowerGrid));\n\n  return (\n    <>\n      <Heading as=\"h1\" size=\"md\" pb={2}>\n        Keep the Lights On\n      </Heading>\n      <VStack pt={4} align=\"stretch\" spacing={4}>\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Time Elapsed\n          </Heading>\n          <Text>{formatStandardNumber(daysElapsed)} days</Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Funds\n          </Heading>\n          <Text pb={1}>${formatMoney(cashAvailable)}</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatMoney(cashEarnedPerDay)} per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Power Generation\n          </Heading>\n          <Text pb={1}>{formatStandardNumber(wattsGeneratedPerDay)} watts per day</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatMoney(pricePerWatt)} per watt\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Houses Illuminated\n          </Heading>\n          <Text pb={1}>\n            {formatStandardNumber(homesPowered, 2)} / {formatStandardNumber(homesInPowerGrid)}\n          </Text>\n          <Text pb={1} color={homesPowered === homesInPowerGrid ? undefined : \"red.500\"}>\n            {formatStandardNumber(percentOfHomesPowered)}%\n          </Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatStandardNumber(wattsUsedPerHomePerDay)} watts used per house per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Research\n          </Heading>\n          <Text pb={1}>{formatStandardNumber(ideasAvailable)} ideas</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatStandardNumber(ideasGeneratedPerDay)} ideas per day\n          </Text>\n        </StackItem>\n      </VStack>\n    </>\n  );\n};\n\nexport default SummaryPane;\n","import { Heading, SimpleGrid, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { formatMoney, formatStandardNumber } from \"../lib/SerializeableBigNumber\";\nimport { selectMaxCollected, selectTotalCollected } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst AchievementsTab: React.FunctionComponent<Props> = (props) => {\n  const maxCollected = useAppSelector(selectMaxCollected);\n  const totalCollected = useAppSelector(selectTotalCollected);\n\n  return (\n    <VStack align=\"flex-start\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={2}>\n          Statistics\n        </Heading>\n        <SimpleGrid columns={2} spacingX={4}>\n          <Text fontWeight=\"bold\">Max cash available</Text>\n          <Text>${formatMoney(maxCollected.maxCashAvailable)}</Text>\n          <Text fontWeight=\"bold\">Total cash earned</Text>\n          <Text>${formatMoney(totalCollected.totalCashEarned)}</Text>\n          <Text fontWeight=\"bold\">Max ideas available</Text>\n          <Text>{formatStandardNumber(maxCollected.maxIdeasAvailable)} ideas</Text>\n          <Text fontWeight=\"bold\">Total ideas created</Text>\n          <Text>{formatStandardNumber(totalCollected.totalIdeasGenerated)} ideas</Text>\n          <Text fontWeight=\"bold\">Total power sold</Text>\n          <Text>{formatStandardNumber(totalCollected.totalWattsSold)} watts</Text>\n        </SimpleGrid>\n      </StackItem>\n    </VStack>\n  );\n};\n\nexport default AchievementsTab;\n","import { Button, Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { canPurchaseGenerator, generatorDescriptions, generatorTypes } from \"../lib/Generators\";\nimport { compare, formatStandardNumber, formatMoney, multiply, serializeNumber } from \"../lib/SerializeableBigNumber\";\nimport { buyGenerator, selectCashAvailable, selectGenerators, selectMaxCashAvailable } from \"../store/gameSlice\";\nimport { useAppSelector, useAppDispatch } from \"../store/hooks\";\n\ntype Props = {};\n\nconst GenerationTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n  const generators = useAppSelector(selectGenerators);\n\n  return (\n    <VStack align=\"stretch\" spacing={4}>\n      {generatorTypes.map((generatorType) => {\n        const generator = generators[generatorType];\n        const generatorDescription = generatorDescriptions[generatorType];\n\n        if (compare(maxCashAvailable, multiply(serializeNumber(0.75), generatorDescription.baseCost)) === -1) {\n          return null;\n        }\n\n        return (\n          <StackItem key={generatorType}>\n            <Heading as=\"h2\" size=\"sm\" pb={1}>\n              {generatorDescription.name} x {generator.numberOwned}\n            </Heading>\n            <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n              Generates {formatStandardNumber(generator.wattsPerDay)} watts per day -- {generatorDescription.colorText}\n            </Text>\n            <Button\n              onClick={() => dispatch(buyGenerator(generatorType))}\n              disabled={!canPurchaseGenerator(cashAvailable, generator)}\n            >\n              Buy for ${formatMoney(generator.nextPurchaseCost, true)}\n            </Button>\n          </StackItem>\n        );\n      })}\n    </VStack>\n  );\n};\n\nexport default GenerationTab;\n","import { Button, Heading, StackItem, VStack, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { researcherTypes, researcherDescriptions, canPurchaseResearcher, ResearcherType } from \"../lib/Researchers\";\nimport { canPurchaseResearchProject, hasRequiredResearchProjects, researchProjects } from \"../lib/ResearchProjects\";\nimport { compare, multiply, serializeNumber, formatStandardNumber, formatMoney } from \"../lib/SerializeableBigNumber\";\nimport {\n  selectCashAvailable,\n  selectMaxCashAvailable,\n  buyResearcher,\n  selectResearchers,\n  purchaseResearchProject,\n  selectIdeasAvailable,\n  selectMaxIdeasAvailable,\n  selectPurchasedResearchProjects,\n} from \"../store/gameSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\n\nconst minimumResearcherCost = multiply(\n  serializeNumber(0.75),\n  researcherDescriptions[ResearcherType.juniorResearchAssistant].baseCost,\n);\n\ntype Props = {};\n\nconst ResearchTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n\n  const ideasAvailable = useAppSelector(selectIdeasAvailable);\n  const maxIdeasAvailable = useAppSelector(selectMaxIdeasAvailable);\n\n  const researchers = useAppSelector(selectResearchers);\n  const purchasedResearchProjects = useAppSelector(selectPurchasedResearchProjects);\n\n  if (compare(maxCashAvailable, minimumResearcherCost) !== 1) {\n    return (\n      <Text fontStyle=\"italic\" color=\"gray.400\">\n        If you collect enough money, maybe you can hire staff to research improvements.\n      </Text>\n    );\n  }\n\n  return (\n    <VStack align=\"stretch\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={4}>\n          Researchers\n        </Heading>\n        <VStack align=\"stretch\" spacing={4}>\n          {researcherTypes.map((researcherType) => {\n            const researcher = researchers[researcherType];\n            const researcherDescription = researcherDescriptions[researcherType];\n\n            if (compare(maxCashAvailable, multiply(serializeNumber(0.75), researcherDescription.baseCost)) === -1) {\n              return null;\n            }\n\n            return (\n              <StackItem key={researcherType}>\n                <Heading as=\"h3\" size=\"sm\" pb={1}>\n                  {researcherDescription.name} x {researcher.numberEmployed}\n                </Heading>\n                <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n                  Generates {formatStandardNumber(researcher.ideasPerDay)} ideas per day --{\" \"}\n                  {researcherDescription.colorText}\n                </Text>\n                <Button\n                  onClick={() => dispatch(buyResearcher(researcherType))}\n                  disabled={!canPurchaseResearcher(cashAvailable, researcher)}\n                >\n                  Hire for ${formatMoney(researcher.nextPurchaseCost, true)}\n                </Button>\n              </StackItem>\n            );\n          })}\n        </VStack>\n      </StackItem>\n\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={4}>\n          Projects\n        </Heading>\n        {maxIdeasAvailable === serializeNumber(0) ? (\n          <Text fontStyle=\"italic\" color=\"gray.400\">\n            Hire some researchers, and they might have an idea or two of how to improve your power grid.\n          </Text>\n        ) : (\n          <VStack align=\"stretch\" spacing={4}>\n            {researchProjects.map((researchProject) => {\n              if (purchasedResearchProjects.includes(researchProject.identifier)) {\n                return null;\n              }\n\n              if (\n                compare(maxIdeasAvailable, multiply(serializeNumber(0.75), researchProject.cost)) === -1 ||\n                !hasRequiredResearchProjects(researchProject, purchasedResearchProjects)\n              ) {\n                return null;\n              }\n\n              return (\n                <StackItem key={researchProject.identifier}>\n                  <Heading as=\"h3\" size=\"sm\" pb={1}>\n                    {researchProject.name}\n                  </Heading>\n                  <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n                    {researchProject.description}\n                  </Text>\n                  <Button\n                    onClick={() => dispatch(purchaseResearchProject(researchProject.identifier))}\n                    disabled={!canPurchaseResearchProject(ideasAvailable, researchProject, purchasedResearchProjects)}\n                  >\n                    Purchase for {formatStandardNumber(researchProject.cost)} ideas\n                  </Button>\n                </StackItem>\n              );\n            })}\n          </VStack>\n        )}\n      </StackItem>\n    </VStack>\n  );\n};\n\nexport default ResearchTab;\n","import * as React from \"react\";\nimport { useColorMode, useColorModeValue, IconButtonProps, Button } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"Switch to Dark Mode\", \"Switch to Light Mode\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <Button leftIcon={<SwitchIcon />} onClick={toggleColorMode}>\n      {text}\n    </Button>\n  );\n};\n","import { GameState } from \"../store/gameSlice\";\n\nexport const serializeGameState = (gameState: GameState): string => {\n  return btoa(JSON.stringify(gameState));\n};\n\nexport const deserializeGameState = (serializedState: string): GameState | undefined => {\n  try {\n    return JSON.parse(atob(serializedState));\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveGameState = (gameState: GameState): void => {\n  localStorage.setItem(\"gameSave\", serializeGameState(gameState));\n};\n\nexport const loadGameState = (): GameState | undefined => {\n  const savedState = localStorage.getItem(\"gameSave\");\n  if (savedState) {\n    return deserializeGameState(savedState);\n  } else {\n    return undefined;\n  }\n};\n","import { Box, Button, chakra, Textarea, useClipboard } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { serializeGameState } from \"../../lib/gameStateSaves\";\nimport { selectGameState } from \"../../store/gameSlice\";\nimport { useAppSelector } from \"../../store/hooks\";\n\ntype Props = {};\n\nconst ExportedGameState: React.FunctionComponent<Props> = (props) => {\n  const [exportedGameState, setExportedGameState] = useState<string>(\"\");\n  const gameState = useAppSelector(selectGameState);\n  const { hasCopied, onCopy } = useClipboard(exportedGameState);\n\n  useEffect(() => {\n    setExportedGameState(serializeGameState(gameState));\n    // Only update the exported game state when this component is initially rendered. Intentionally leave out\n    // gameState as a dependency.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setExportedGameState]);\n\n  return (\n    <Box {...props} position=\"relative\">\n      <Textarea readOnly value={exportedGameState} height={250} />\n      <Button\n        onClick={onCopy}\n        variant=\"solid\"\n        colorScheme=\"teal\"\n        size=\"xs\"\n        textTransform=\"uppercase\"\n        position=\"absolute\"\n        zIndex={1}\n        top={3}\n        right={6}\n      >\n        {hasCopied ? \"Copied!\" : \"Copy\"}\n      </Button>\n    </Box>\n  );\n};\n\nexport default chakra(ExportedGameState);\n","import { Box, Button, chakra, Textarea, useToast } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deserializeGameState } from \"../../lib/gameStateSaves\";\nimport { resetGame } from \"../../store/gameSlice\";\n\nconst importWarningMessage =\n  \"This will overwrite all of your current save data, and cannot be undone. Are you sure you want to continue?\";\n\ntype Props = {};\n\nconst ImportGameState: React.FunctionComponent<Props> = (props) => {\n  const [value, setValue] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const handleImport = () => {\n    if (window.confirm(importWarningMessage)) {\n      const parsedValue = deserializeGameState(value);\n\n      if (parsedValue) {\n        dispatch(resetGame(parsedValue));\n\n        toast({\n          title: \"Save Imported\",\n          description: \"Your game save has been imported successfully!\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n          position: \"top-right\",\n        });\n      } else {\n        toast({\n          title: \"Import Failed\",\n          description: \"Importing the game save failed. Check that you have entered the entire game state.\",\n          status: \"error\",\n          duration: 9000,\n          isClosable: true,\n          position: \"top-right\",\n        });\n      }\n    }\n  };\n\n  return (\n    <Box {...props}>\n      <Textarea value={value} onChange={(event) => setValue(event.target.value)} />\n      <Button mt={2} onClick={handleImport} disabled={!value}>\n        Import Data\n      </Button>\n    </Box>\n  );\n};\n\nexport default chakra(ImportGameState);\n","import { Button, ButtonProps } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { saveGameState } from \"../../lib/gameStateSaves\";\nimport { selectGameState } from \"../../store/gameSlice\";\nimport { useAppSelector } from \"../../store/hooks\";\n\nconst ManualSaveButton: React.FunctionComponent<ButtonProps> = (props) => {\n  const gameState = useAppSelector(selectGameState);\n\n  const handleSave = () => {\n    saveGameState(gameState);\n  };\n\n  return (\n    <Button {...props} onClick={handleSave}>\n      Save\n    </Button>\n  );\n};\n\nexport default ManualSaveButton;\n","import { Button, Heading, HStack, Select, StackItem, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { selectTicksPerDay, updateTicksPerDay, resetGame } from \"../store/gameSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { ColorModeSwitcher } from \"./SettingsTab/ColorModeSwitcher\";\nimport ExportedGameState from \"./SettingsTab/ExportedGameState\";\nimport ImportGameState from \"./SettingsTab/ImportGameState\";\nimport ManualSaveButton from \"./SettingsTab/ManualSaveButton\";\n\nconst resetWarning =\n  \"This will reset all of your progress with no benefit, and cannot be undone. Are you sure you want to continue?\";\n\ntype Props = {};\n\nconst SettingsTab: React.FunctionComponent<Props> = (props) => {\n  const [showExportedGameState, setShowExportedGameState] = useState(false);\n  const [showImportGameState, setShowImportGameState] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const ticksPerDay = useAppSelector(selectTicksPerDay);\n\n  const toggleShowExportedGameState = () => {\n    setShowImportGameState(false);\n    setShowExportedGameState(!showExportedGameState);\n  };\n\n  const toggleShowImportameState = () => {\n    setShowExportedGameState(false);\n    setShowImportGameState(!showImportGameState);\n  };\n\n  const handleResetSession = () => {\n    if (window.confirm(resetWarning)) {\n      dispatch(resetGame());\n    }\n  };\n\n  return (\n    <VStack align=\"flex-start\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={2}>\n          Theme\n        </Heading>\n        <ColorModeSwitcher />\n      </StackItem>\n\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={2}>\n          Manual Game Saves\n        </Heading>\n        <HStack spacing={4}>\n          <ManualSaveButton />\n          <Button onClick={toggleShowExportedGameState}>Export Game Save</Button>\n          <Button onClick={toggleShowImportameState}>Import Game Save</Button>\n          <Button onClick={handleResetSession}>Reset</Button>\n        </HStack>\n        {showExportedGameState && <ExportedGameState mt={4} />}\n        {showImportGameState && <ImportGameState mt={4} />}\n      </StackItem>\n\n      {process.env.NODE_ENV !== \"production\" && (\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={2}>\n            Ticks per Second (Development Mode)\n          </Heading>\n\n          <Select\n            placeholder=\"Select option\"\n            value={ticksPerDay}\n            onChange={(event) => dispatch(updateTicksPerDay(parseInt(event.target.value, 10)))}\n          >\n            <option value={1}>1</option>\n            <option value={2}>2</option>\n            <option value={4}>4</option>\n            <option value={8}>8</option>\n            <option value={16}>16</option>\n          </Select>\n        </StackItem>\n      )}\n    </VStack>\n  );\n};\n\nexport default SettingsTab;\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AchievementsTab from \"../components/AchievementsTab\";\nimport GenerationTab from \"../components/GenerationTab\";\nimport ResearchTab from \"../components/ResearchTab\";\nimport SettingsTab from \"../components/SettingsTab\";\n\ntype Props = {};\n\nconst ContentPane: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>Generation</Tab>\n        <Tab>Research</Tab>\n        <Tab>Achievements</Tab>\n        <Tab>Settings</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <GenerationTab />\n        </TabPanel>\n        <TabPanel>\n          <ResearchTab />\n        </TabPanel>\n        <TabPanel>\n          <AchievementsTab />\n        </TabPanel>\n        <TabPanel>\n          <SettingsTab />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nexport default ContentPane;\n","import { useInterval } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { saveGameState } from \"../lib/gameStateSaves\";\nimport { selectGameState } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst GameAutosaver: React.FunctionComponent<Props> = (props) => {\n  const gameState = useAppSelector(selectGameState);\n\n  useInterval(() => {\n    saveGameState(gameState);\n  }, 30 * 1000);\n\n  return null;\n};\n\nexport default GameAutosaver;\n","import React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { ChakraProvider, Box, theme, Flex, Divider } from \"@chakra-ui/react\";\nimport SummaryPane from \"./SummaryPane\";\nimport ContentPane from \"./ContentPane\";\nimport store from \"../store/store\";\nimport GameAutosaver from \"../components/GameAutosaver\";\n\nconst App: React.FunctionComponent = () => (\n  <ReduxProvider store={store}>\n    <ChakraProvider theme={theme}>\n      <GameAutosaver />\n\n      <Box>\n        <Flex minH=\"100vh\" direction=\"row\" alignItems=\"stretch\">\n          <Box overflow=\"auto\" w={250} p={3}>\n            <SummaryPane />\n          </Box>\n          <Box>\n            <Divider orientation=\"vertical\" />\n          </Box>\n          <Box flexGrow={1} overflow=\"auto\">\n            <ContentPane />\n          </Box>\n        </Flex>\n      </Box>\n    </ChakraProvider>\n  </ReduxProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}