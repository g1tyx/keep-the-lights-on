{"version":3,"sources":["lib/Generators.ts","lib/SerializeableBigNumber.ts","lib/Researchers.ts","lib/ResearchProjects.ts","lib/CurrentStatistics.ts","store/gameSlice.ts","store/hooks.ts","layout/SummaryPane.tsx","components/AchievementsTab.tsx","components/GenerationTab.tsx","components/ResearchTab.tsx","components/SettingsTab/ColorModeSwitcher.tsx","components/SettingsTab.tsx","layout/ContentPane.tsx","store/store.ts","layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["GeneratorType","toDecimal","serialized","Decimal","fromMantissaExponent","man","exp","serializeNumber","value","decimalValue","mantissa","exponent","add","a","b","subtract","multiply","divide","max","min","compare","formatSerializeableBigNumber","toString","ResearcherType","generatorDescriptions","hamsters","name","colorText","baseCost","costOfNthGenerator","n","pinwheels","bicycle","generatorTypes","Object","keys","sort","defaultGeneratorsState","numberOwned","wattsPerDay","nextPurchaseCost","canPurchaseGenerator","cashAvailable","generator","ResearchProjectType","researcherDescriptions","juniorResearchAssistant","costOfNthResearcher","researchAssistant","researcherTypes","defaultResearchersState","numberEmployed","ideasPerDay","canPurchaseResearcher","researcher","defaultCurrentStatistics","daysElapsed","ticksPerDay","maxCashAvailable","cashEarnedPerDay","homesPowered","homesInPowerGrid","wattsUsedPerHomePerDay","pricePerWatt","wattsGeneratedPerDay","ideasAvailable","maxIdeasAvailable","ideasGeneratedPerDay","getNextCurrentStatistics","currentStatistics","tickCounter","getNextDaysElapsed","wattsConsumedPerDay","getNextCashAvailable","ideasPerTick","getNextIdeasAvailable","updateCachedStatistics","generators","researchersState","researchers","values","reduce","acc","calculateWattsGenerated","makePurchase","purchaseCost","researchProjects","identifier","expandGrid1","description","cost","requiresResearchProjects","applyResearch","state","expandGrid2","initialState","purchasedResearchProjects","gameSlice","createSlice","reducers","tick","action","payload","updateTicksPerDay","buyGenerator","generatorType","purchaseGenerator","buyResearcher","researcherType","purchaseResearcher","purchaseResearchProject","researchProject","find","project","push","actions","selectGenerators","game","selectResearchers","selectTicksPerDay","selectCurrentStatistics","selectCashAvailable","selectMaxCashAvailable","selectIdeasAvailable","selectMaxIdeasAvailable","selectPurchasedResearchProjects","useAppDispatch","useDispatch","useAppSelector","useSelector","SummaryPane","props","percentOfHomesPowered","as","size","pb","pt","align","spacing","fontSize","color","undefined","AchievementsTab","GenerationTab","dispatch","map","generatorDescription","onClick","disabled","minimumResearcherCost","ResearchTab","fontStyle","researcherDescription","includes","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","leftIcon","variant","SettingsTab","process","ContentPane","store","configureStore","reducer","setInterval","App","theme","minH","direction","alignItems","overflow","w","p","orientation","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3aeede9e.chunk.js","sourcesContent":["import { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum GeneratorType {\n  hamsters = \"hamsters\",\n  pinwheels = \"pinwheels\",\n  bicycle = \"bicycle\",\n}\n\nexport type GeneratorDescription = {\n  name: string;\n  colorText: string;\n  baseCost: SerializeableBigNumber;\n  costOfNthGenerator: (n: number) => SerializeableBigNumber;\n};\n\nexport type GeneratorDescriptions = {\n  [key in GeneratorType]: GeneratorDescription;\n};\n\nexport const generatorDescriptions: GeneratorDescriptions = {\n  hamsters: {\n    name: \"Hamster\",\n    colorText: \"Watch those little legs go!\",\n    baseCost: serializeNumber(0.25),\n    costOfNthGenerator: (n) => serializeNumber(n * 0.25),\n  },\n  pinwheels: {\n    name: \"Pinwheel\",\n    colorText: \"One day you'll build a great wind farm.\",\n    baseCost: serializeNumber(2),\n    costOfNthGenerator: (n) => serializeNumber(n * 2),\n  },\n  bicycle: {\n    name: \"Human-powered Bicycle\",\n    colorText: \"You can make it up the hill, just keep pedaling!\",\n    baseCost: serializeNumber(20),\n    costOfNthGenerator: (n) => serializeNumber((n - 1) * 5 + 20),\n  },\n};\n\nexport const generatorTypes = Object.keys(GeneratorType).sort((a, b) =>\n  compare(generatorDescriptions[a as GeneratorType].baseCost, generatorDescriptions[b as GeneratorType].baseCost),\n) as Array<GeneratorType>;\n\nexport type GeneratorState = {\n  numberOwned: number;\n  wattsPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type GeneratorsState = {\n  [key in GeneratorType]: GeneratorState;\n};\n\nexport const defaultGeneratorsState: GeneratorsState = {\n  hamsters: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(0.5),\n    nextPurchaseCost: generatorDescriptions.hamsters.baseCost,\n  },\n  pinwheels: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(2),\n    nextPurchaseCost: generatorDescriptions.pinwheels.baseCost,\n  },\n  bicycle: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(10),\n    nextPurchaseCost: generatorDescriptions.pinwheels.baseCost,\n  },\n};\n\nexport const canPurchaseGenerator = (cashAvailable: SerializeableBigNumber, generator: GeneratorState): boolean =>\n  compare(cashAvailable, generator.nextPurchaseCost) !== -1;\n\nexport const purchaseGenerator = (generatorType: GeneratorType, generator: GeneratorState): GeneratorState => {\n  const { numberOwned } = generator;\n\n  const nextPurchaseCost = generatorDescriptions[generatorType].costOfNthGenerator(numberOwned + 2);\n\n  return {\n    ...generator,\n    numberOwned: numberOwned + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateWattsGenerated = (generators: GeneratorsState): SerializeableBigNumber =>\n  Object.values(generators).reduce(\n    (acc, generator) => add(acc, multiply(serializeNumber(generator.numberOwned), generator.wattsPerDay)),\n    serializeNumber(0),\n  );\n","import Decimal, { DecimalSource } from \"break_infinity.js\";\n\nexport type SerializeableBigNumber = {\n  man: number;\n  exp: number;\n};\n\nconst toDecimal = (serialized: SerializeableBigNumber): Decimal =>\n  Decimal.fromMantissaExponent(serialized.man, serialized.exp);\n\nexport const serializeNumber = (value: DecimalSource): SerializeableBigNumber => {\n  const decimalValue = new Decimal(value);\n\n  return {\n    man: decimalValue.mantissa,\n    exp: decimalValue.exponent,\n  };\n};\n\nexport const add = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.add(toDecimal(a), toDecimal(b)));\n\nexport const subtract = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.subtract(toDecimal(a), toDecimal(b)));\n\nexport const multiply = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.multiply(toDecimal(a), toDecimal(b)));\n\nexport const divide = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.divide(toDecimal(a), toDecimal(b)));\n\nexport const max = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.max(toDecimal(a), toDecimal(b)));\n\nexport const min = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.min(toDecimal(a), toDecimal(b)));\n\nexport const compare = (a: SerializeableBigNumber, b: SerializeableBigNumber): number =>\n  Decimal.compare(toDecimal(a), toDecimal(b));\n\nexport const formatSerializeableBigNumber = (a: SerializeableBigNumber): string => toDecimal(a).toString();\n","import { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum ResearcherType {\n  juniorResearchAssistant = \"juniorResearchAssistant\",\n  researchAssistant = \"researchAssistant\",\n}\n\nexport type ResearcherDescription = {\n  name: string;\n  colorText: string;\n  baseCost: SerializeableBigNumber;\n  costOfNthResearcher: (n: number) => SerializeableBigNumber;\n};\n\nexport type ResearcherDescriptions = {\n  [key in ResearcherType]: ResearcherDescription;\n};\n\nexport const researcherDescriptions: ResearcherDescriptions = {\n  juniorResearchAssistant: {\n    name: \"Junior Research Assistant\",\n    colorText: \"Maybe recruiting your 12 year old cousin wasn't the best idea.\",\n    baseCost: serializeNumber(5),\n    costOfNthResearcher: (n) => serializeNumber(n * 2 + 3),\n  },\n  researchAssistant: {\n    name: \"Research Assistant\",\n    colorText: \"The honors students from your high school are interested in your project. They might be helpful.\",\n    baseCost: serializeNumber(25),\n    costOfNthResearcher: (n) => serializeNumber(n * 10 + 15),\n  },\n};\n\nexport const researcherTypes = Object.keys(ResearcherType).sort((a, b) =>\n  compare(researcherDescriptions[a as ResearcherType].baseCost, researcherDescriptions[b as ResearcherType].baseCost),\n) as Array<ResearcherType>;\n\nexport type ResearcherState = {\n  numberEmployed: number;\n  ideasPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type ResearchersState = {\n  [key in ResearcherType]: ResearcherState;\n};\n\nexport const defaultResearchersState: ResearchersState = {\n  juniorResearchAssistant: {\n    numberEmployed: 0,\n    ideasPerDay: serializeNumber(0.5),\n    nextPurchaseCost: researcherDescriptions.juniorResearchAssistant.baseCost,\n  },\n  researchAssistant: {\n    numberEmployed: 0,\n    ideasPerDay: serializeNumber(3),\n    nextPurchaseCost: researcherDescriptions.researchAssistant.baseCost,\n  },\n};\n\nexport const canPurchaseResearcher = (cashAvailable: SerializeableBigNumber, researcher: ResearcherState): boolean =>\n  compare(cashAvailable, researcher.nextPurchaseCost) !== -1;\n\nexport const purchaseResearcher = (researcherType: ResearcherType, researcher: ResearcherState): ResearcherState => {\n  const { numberEmployed } = researcher;\n\n  const nextPurchaseCost = researcherDescriptions[researcherType].costOfNthResearcher(numberEmployed + 2);\n\n  return {\n    ...researcher,\n    numberEmployed: numberEmployed + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateIdeasCreated = (researchers: ResearchersState): SerializeableBigNumber =>\n  Object.values(researchers).reduce(\n    (acc, researcher) => add(acc, multiply(serializeNumber(researcher.numberEmployed), researcher.ideasPerDay)),\n    serializeNumber(0),\n  );\n","import { GameState } from \"../store/gameSlice\";\nimport { SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum ResearchProjectType {\n  expandGrid1 = \"expandGrid1\",\n  expandGrid2 = \"expandGrid2\",\n}\n\nexport type ResearchProjectDescription = {\n  identifier: ResearchProjectType;\n  name: string;\n  description: string;\n  cost: SerializeableBigNumber;\n  requiresResearchProjects: Array<ResearchProjectType>;\n  applyResearch: (state: GameState) => GameState;\n};\n\nexport const researchProjects: Array<ResearchProjectDescription> = [\n  {\n    identifier: ResearchProjectType.expandGrid1,\n    name: \"Power the Street\",\n    description: \"Expand your power grid to provide power to your whole street\",\n    cost: serializeNumber(100),\n    requiresResearchProjects: [],\n    applyResearch: (state) => {\n      state.currentStatistics.homesInPowerGrid = serializeNumber(10);\n      return state;\n    },\n  },\n  {\n    identifier: ResearchProjectType.expandGrid2,\n    name: \"Power the Neighborhood\",\n    description: \"Expand your power grid to provide power to your whole street\",\n    cost: serializeNumber(2000),\n    requiresResearchProjects: [],\n    applyResearch: (state) => {\n      state.currentStatistics.homesInPowerGrid = serializeNumber(100);\n      return state;\n    },\n  },\n];\n","import { calculateWattsGenerated, GeneratorsState } from \"./Generators\";\nimport { calculateIdeasCreated, ResearchersState } from \"./Researchers\";\nimport {\n  SerializeableBigNumber,\n  serializeNumber,\n  add,\n  multiply,\n  divide,\n  min,\n  max,\n  subtract,\n} from \"./SerializeableBigNumber\";\n\nexport type CurrentStatistics = {\n  daysElapsed: SerializeableBigNumber;\n  ticksPerDay: number;\n\n  cashAvailable: SerializeableBigNumber;\n  maxCashAvailable: SerializeableBigNumber;\n  cashEarnedPerDay: SerializeableBigNumber;\n\n  homesPowered: SerializeableBigNumber;\n  homesInPowerGrid: SerializeableBigNumber;\n  wattsUsedPerHomePerDay: SerializeableBigNumber;\n\n  pricePerWatt: SerializeableBigNumber;\n  wattsGeneratedPerDay: SerializeableBigNumber;\n\n  ideasAvailable: SerializeableBigNumber;\n  maxIdeasAvailable: SerializeableBigNumber;\n  ideasGeneratedPerDay: SerializeableBigNumber;\n};\n\nexport const defaultCurrentStatistics: CurrentStatistics = {\n  daysElapsed: serializeNumber(0),\n  ticksPerDay: 16,\n\n  cashAvailable: serializeNumber(1),\n  maxCashAvailable: serializeNumber(0),\n  cashEarnedPerDay: serializeNumber(0),\n\n  homesPowered: serializeNumber(0),\n  homesInPowerGrid: serializeNumber(1),\n  wattsUsedPerHomePerDay: serializeNumber(20),\n\n  pricePerWatt: serializeNumber(0.03),\n  wattsGeneratedPerDay: serializeNumber(0),\n\n  ideasAvailable: serializeNumber(0),\n  maxIdeasAvailable: serializeNumber(0),\n  ideasGeneratedPerDay: serializeNumber(0),\n};\n\nconst getNextDaysElapsed = (currentStatistics: CurrentStatistics, tickCounter: number): SerializeableBigNumber => {\n  const { daysElapsed, ticksPerDay } = currentStatistics;\n\n  if (tickCounter % ticksPerDay === 0) {\n    return add(daysElapsed, serializeNumber(1));\n  } else {\n    return daysElapsed;\n  }\n};\n\nconst getNextCashAvailable = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const {\n    ticksPerDay,\n    cashAvailable,\n    homesInPowerGrid,\n    wattsUsedPerHomePerDay,\n    pricePerWatt,\n    wattsGeneratedPerDay,\n  } = currentStatistics;\n\n  const wattsConsumedPerDay = min(wattsGeneratedPerDay, multiply(homesInPowerGrid, wattsUsedPerHomePerDay));\n  const cashEarnedPerDay = multiply(wattsConsumedPerDay, pricePerWatt);\n\n  return add(cashAvailable, divide(cashEarnedPerDay, serializeNumber(ticksPerDay)));\n};\n\nconst getNextIdeasAvailable = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { ticksPerDay, ideasAvailable, ideasGeneratedPerDay } = currentStatistics;\n\n  const ideasPerTick = divide(ideasGeneratedPerDay, serializeNumber(ticksPerDay));\n\n  return add(ideasAvailable, ideasPerTick);\n};\n\nexport const getNextCurrentStatistics = (\n  currentStatistics: CurrentStatistics,\n  tickCounter: number,\n): CurrentStatistics => {\n  const daysElapsed = getNextDaysElapsed(currentStatistics, tickCounter);\n\n  const cashAvailable = getNextCashAvailable(currentStatistics);\n  const maxCashAvailable = max(cashAvailable, currentStatistics.maxCashAvailable);\n\n  const ideasAvailable = getNextIdeasAvailable(currentStatistics);\n  const maxIdeasAvailable = max(ideasAvailable, currentStatistics.maxCashAvailable);\n\n  return {\n    ...currentStatistics,\n    daysElapsed,\n    cashAvailable,\n    maxCashAvailable,\n    ideasAvailable,\n    maxIdeasAvailable,\n  };\n};\n\nexport const updateCachedStatistics = (\n  currentStatistics: CurrentStatistics,\n  generators: GeneratorsState,\n  researchersState: ResearchersState,\n) => {\n  const wattsGeneratedPerDay = calculateWattsGenerated(generators);\n  const wattsConsumedPerDay = min(\n    wattsGeneratedPerDay,\n    multiply(currentStatistics.homesInPowerGrid, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const cashEarnedPerDay = multiply(wattsConsumedPerDay, currentStatistics.pricePerWatt);\n  const homesPowered = min(\n    currentStatistics.homesInPowerGrid,\n    divide(wattsGeneratedPerDay, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const ideasGeneratedPerDay = calculateIdeasCreated(researchersState);\n\n  return { ...currentStatistics, cashEarnedPerDay, homesPowered, wattsGeneratedPerDay, ideasGeneratedPerDay };\n};\n\nexport const makePurchase = (\n  currentStatistics: CurrentStatistics,\n  purchaseCost: SerializeableBigNumber,\n): CurrentStatistics => {\n  const cashAvailable = subtract(currentStatistics.cashAvailable, purchaseCost);\n  currentStatistics.cashAvailable = cashAvailable;\n  return currentStatistics;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  getNextCurrentStatistics,\n  CurrentStatistics,\n  defaultCurrentStatistics,\n  updateCachedStatistics,\n  makePurchase,\n} from \"../lib/CurrentStatistics\";\nimport {\n  canPurchaseGenerator,\n  defaultGeneratorsState,\n  GeneratorsState,\n  GeneratorType,\n  purchaseGenerator,\n} from \"../lib/Generators\";\nimport {\n  canPurchaseResearcher,\n  defaultResearchersState,\n  purchaseResearcher,\n  ResearchersState,\n  ResearcherType,\n} from \"../lib/Researchers\";\nimport { researchProjects, ResearchProjectType } from \"../lib/ResearchProjects\";\nimport { compare, subtract } from \"../lib/SerializeableBigNumber\";\nimport { RootState } from \"./store\";\n\nexport interface GameState {\n  currentStatistics: CurrentStatistics;\n  generators: GeneratorsState;\n  researchers: ResearchersState;\n  purchasedResearchProjects: Array<ResearchProjectType>;\n}\n\nconst initialState: GameState = {\n  currentStatistics: defaultCurrentStatistics,\n  generators: defaultGeneratorsState,\n  researchers: defaultResearchersState,\n  purchasedResearchProjects: [],\n};\n\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    tick: (state, action: PayloadAction<number>) => {\n      state.currentStatistics = getNextCurrentStatistics(state.currentStatistics, action.payload);\n    },\n\n    updateTicksPerDay: (state, action: PayloadAction<number>) => {\n      state.currentStatistics.ticksPerDay = action.payload;\n    },\n\n    buyGenerator: (state, action: PayloadAction<GeneratorType>) => {\n      const generatorType = action.payload;\n\n      const { currentStatistics, generators, researchers } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const generator = generators[generatorType];\n\n      if (canPurchaseGenerator(cashAvailable, generator)) {\n        const purchaseCost = generator.nextPurchaseCost;\n\n        state.generators[generatorType] = purchaseGenerator(generatorType, generator);\n        state.currentStatistics = makePurchase(currentStatistics, purchaseCost);\n        state.currentStatistics = updateCachedStatistics(currentStatistics, generators, researchers);\n      }\n    },\n\n    buyResearcher: (state, action: PayloadAction<ResearcherType>) => {\n      const researcherType = action.payload;\n\n      const { currentStatistics, generators, researchers } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const researcher = researchers[researcherType];\n\n      if (canPurchaseResearcher(cashAvailable, researcher)) {\n        const purchaseCost = researcher.nextPurchaseCost;\n\n        state.researchers[researcherType] = purchaseResearcher(researcherType, researcher);\n        state.currentStatistics = makePurchase(currentStatistics, purchaseCost);\n        state.currentStatistics = updateCachedStatistics(currentStatistics, generators, researchers);\n      }\n    },\n\n    purchaseResearchProject: (state, action: PayloadAction<ResearchProjectType>) => {\n      const researchProject = researchProjects.find((project) => project.identifier === action.payload);\n\n      if (researchProject && compare(state.currentStatistics.ideasAvailable, researchProject.cost) !== -1) {\n        state = researchProject.applyResearch(state);\n        state.currentStatistics.ideasAvailable = subtract(state.currentStatistics.ideasAvailable, researchProject.cost);\n        state.purchasedResearchProjects.push(action.payload);\n      }\n    },\n  },\n});\n\nexport const { tick, buyGenerator, buyResearcher, purchaseResearchProject, updateTicksPerDay } = gameSlice.actions;\n\nexport const selectGenerators = (state: RootState) => state.game.generators;\n\nexport const selectResearchers = (state: RootState) => state.game.researchers;\n\nexport const selectTicksPerDay = (state: RootState) => state.game.currentStatistics.ticksPerDay;\n\nexport const selectCurrentStatistics = (state: RootState) => state.game.currentStatistics;\nexport const selectCashAvailable = (state: RootState) => state.game.currentStatistics.cashAvailable;\nexport const selectMaxCashAvailable = (state: RootState) => state.game.currentStatistics.maxCashAvailable;\n\nexport const selectIdeasAvailable = (state: RootState) => state.game.currentStatistics.ideasAvailable;\nexport const selectMaxIdeasAvailable = (state: RootState) => state.game.currentStatistics.maxIdeasAvailable;\nexport const selectPurchasedResearchProjects = (state: RootState) => state.game.purchasedResearchProjects;\n\nexport default gameSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { divide, formatSerializeableBigNumber, multiply, serializeNumber } from \"../lib/SerializeableBigNumber\";\nimport { selectCurrentStatistics } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst SummaryPane: React.FunctionComponent<Props> = (props) => {\n  const currentStatistics = useAppSelector(selectCurrentStatistics);\n\n  const {\n    daysElapsed,\n    cashAvailable,\n    cashEarnedPerDay,\n    homesPowered,\n    homesInPowerGrid,\n    wattsUsedPerHomePerDay,\n    pricePerWatt,\n    wattsGeneratedPerDay,\n    ideasAvailable,\n    ideasGeneratedPerDay,\n  } = currentStatistics;\n\n  const percentOfHomesPowered = multiply(serializeNumber(100), divide(homesPowered, homesInPowerGrid));\n\n  return (\n    <>\n      <Heading as=\"h1\" size=\"md\" pb={2}>\n        Keep the Lights On\n      </Heading>\n      <VStack pt={4} align=\"stretch\" spacing={4}>\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Time Elapsed\n          </Heading>\n          <Text>{formatSerializeableBigNumber(daysElapsed)} days</Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Funds\n          </Heading>\n          <Text pb={1}>${formatSerializeableBigNumber(cashAvailable)}</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatSerializeableBigNumber(cashEarnedPerDay)} per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Power Generation\n          </Heading>\n          <Text pb={1}>{formatSerializeableBigNumber(wattsGeneratedPerDay)} watts per day</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatSerializeableBigNumber(pricePerWatt)} per watt\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Houses Illuminated\n          </Heading>\n          <Text pb={1}>\n            {formatSerializeableBigNumber(homesPowered)} / {formatSerializeableBigNumber(homesInPowerGrid)}\n          </Text>\n          <Text pb={1} color={homesPowered === homesInPowerGrid ? undefined : \"red.500\"}>\n            {formatSerializeableBigNumber(percentOfHomesPowered)}%\n          </Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatSerializeableBigNumber(wattsUsedPerHomePerDay)} watts used per house per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Research\n          </Heading>\n          <Text pb={1}>{formatSerializeableBigNumber(ideasAvailable)} ideas</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatSerializeableBigNumber(ideasGeneratedPerDay)} ideas per day\n          </Text>\n        </StackItem>\n      </VStack>\n    </>\n  );\n};\n\nexport default SummaryPane;\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst AchievementsTab: React.FunctionComponent<Props> = (props) => {\n  return <Box>Track your progress here</Box>;\n};\n\nexport default AchievementsTab;\n","import { Button, Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { canPurchaseGenerator, generatorDescriptions, generatorTypes } from \"../lib/Generators\";\nimport { compare, formatSerializeableBigNumber, multiply, serializeNumber } from \"../lib/SerializeableBigNumber\";\nimport { buyGenerator, selectCashAvailable, selectGenerators, selectMaxCashAvailable } from \"../store/gameSlice\";\nimport { useAppSelector, useAppDispatch } from \"../store/hooks\";\n\ntype Props = {};\n\nconst GenerationTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n  const generators = useAppSelector(selectGenerators);\n\n  return (\n    <VStack align=\"stretch\" spacing={4}>\n      {generatorTypes.map((generatorType) => {\n        const generator = generators[generatorType];\n        const generatorDescription = generatorDescriptions[generatorType];\n\n        if (compare(maxCashAvailable, multiply(serializeNumber(0.75), generatorDescription.baseCost)) === -1) {\n          return null;\n        }\n\n        return (\n          <StackItem key={generatorType}>\n            <Heading as=\"h2\" size=\"sm\" pb={1}>\n              {generatorDescription.name} x {generator.numberOwned}\n            </Heading>\n            <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n              Generates {formatSerializeableBigNumber(generator.wattsPerDay)} watts per day --{\" \"}\n              {generatorDescription.colorText}\n            </Text>\n            <Button\n              onClick={() => dispatch(buyGenerator(generatorType))}\n              disabled={!canPurchaseGenerator(cashAvailable, generator)}\n            >\n              Buy for ${formatSerializeableBigNumber(generator.nextPurchaseCost)}\n            </Button>\n          </StackItem>\n        );\n      })}\n    </VStack>\n  );\n};\n\nexport default GenerationTab;\n","import { Button, Heading, StackItem, VStack, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { researcherTypes, researcherDescriptions, canPurchaseResearcher, ResearcherType } from \"../lib/Researchers\";\nimport { researchProjects } from \"../lib/ResearchProjects\";\nimport { compare, multiply, serializeNumber, formatSerializeableBigNumber } from \"../lib/SerializeableBigNumber\";\nimport {\n  selectCashAvailable,\n  selectMaxCashAvailable,\n  buyResearcher,\n  selectResearchers,\n  purchaseResearchProject,\n  selectIdeasAvailable,\n  selectMaxIdeasAvailable,\n  selectPurchasedResearchProjects,\n} from \"../store/gameSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\n\nconst minimumResearcherCost = multiply(\n  serializeNumber(0.75),\n  researcherDescriptions[ResearcherType.juniorResearchAssistant].baseCost,\n);\n\ntype Props = {};\n\nconst ResearchTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n\n  const ideasAvailable = useAppSelector(selectIdeasAvailable);\n  const maxIdeasAvailable = useAppSelector(selectMaxIdeasAvailable);\n\n  const researchers = useAppSelector(selectResearchers);\n  const purchasedResearchProjects = useAppSelector(selectPurchasedResearchProjects);\n\n  if (compare(maxCashAvailable, minimumResearcherCost) !== 1) {\n    return (\n      <Text fontStyle=\"italic\" color=\"gray.400\">\n        If you collect enough money, maybe you can hire staff to research improvements.\n      </Text>\n    );\n  }\n\n  return (\n    <VStack align=\"stretch\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={4}>\n          Researchers\n        </Heading>\n        <VStack align=\"stretch\" spacing={4}>\n          {researcherTypes.map((researcherType) => {\n            const researcher = researchers[researcherType];\n            const researcherDescription = researcherDescriptions[researcherType];\n\n            if (compare(maxCashAvailable, multiply(serializeNumber(0.75), researcherDescription.baseCost)) === -1) {\n              return null;\n            }\n\n            return (\n              <StackItem key={researcherType}>\n                <Heading as=\"h3\" size=\"sm\" pb={1}>\n                  {researcherDescription.name} x {researcher.numberEmployed}\n                </Heading>\n                <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n                  Generates {formatSerializeableBigNumber(researcher.ideasPerDay)} ideas per day --{\" \"}\n                  {researcherDescription.colorText}\n                </Text>\n                <Button\n                  onClick={() => dispatch(buyResearcher(researcherType))}\n                  disabled={!canPurchaseResearcher(cashAvailable, researcher)}\n                >\n                  Hire for ${formatSerializeableBigNumber(researcher.nextPurchaseCost)}\n                </Button>\n              </StackItem>\n            );\n          })}\n        </VStack>\n      </StackItem>\n\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={4}>\n          Projects\n        </Heading>\n        {maxIdeasAvailable === serializeNumber(0) ? (\n          <Text fontStyle=\"italic\" color=\"gray.400\">\n            Hire some researchers, and they might have an idea or two of how to improve your power grid.\n          </Text>\n        ) : (\n          <VStack align=\"stretch\" spacing={4}>\n            {researchProjects.map((researchProject) => {\n              if (purchasedResearchProjects.includes(researchProject.identifier)) {\n                return null;\n              }\n\n              if (compare(maxIdeasAvailable, multiply(serializeNumber(0.75), researchProject.cost)) === -1) {\n                return null;\n              }\n\n              return (\n                <StackItem key={researchProject.identifier}>\n                  <Heading as=\"h3\" size=\"sm\" pb={1}>\n                    {researchProject.name}\n                  </Heading>\n                  <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n                    {researchProject.description}\n                  </Text>\n                  <Button\n                    onClick={() => dispatch(purchaseResearchProject(researchProject.identifier))}\n                    disabled={compare(ideasAvailable, researchProject.cost) !== 1}\n                  >\n                    Purchase for {formatSerializeableBigNumber(researchProject.cost)} ideas\n                  </Button>\n                </StackItem>\n              );\n            })}\n          </VStack>\n        )}\n      </StackItem>\n    </VStack>\n  );\n};\n\nexport default ResearchTab;\n","import * as React from \"react\";\nimport { useColorMode, useColorModeValue, IconButtonProps, Button } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"Switch to Dark Mode\", \"Switch to Light Mode\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <Button size=\"md\" fontSize=\"lg\" leftIcon={<SwitchIcon />} variant=\"solid\" onClick={toggleColorMode}>\n      {text}\n    </Button>\n  );\n};\n","import { Box, Heading, Select, StackItem, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { selectTicksPerDay, updateTicksPerDay } from \"../store/gameSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { ColorModeSwitcher } from \"./SettingsTab/ColorModeSwitcher\";\n\ntype Props = {};\n\nconst SettingsTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n  const ticksPerDay = useAppSelector(selectTicksPerDay);\n\n  return (\n    <VStack align=\"flex-start\" spacing={4}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={1}>\n          Theme\n        </Heading>\n        <ColorModeSwitcher />\n      </StackItem>\n\n      {process.env.NODE_ENV !== \"production\" && (\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Ticks per Second (Development Mode)\n          </Heading>\n          <Box>\n            <Select\n              placeholder=\"Select option\"\n              value={ticksPerDay}\n              onChange={(event) => dispatch(updateTicksPerDay(parseInt(event.target.value, 10)))}\n            >\n              <option value={1}>1</option>\n              <option value={2}>2</option>\n              <option value={4}>4</option>\n              <option value={8}>8</option>\n              <option value={16}>16</option>\n            </Select>\n          </Box>\n        </StackItem>\n      )}\n    </VStack>\n  );\n};\n\nexport default SettingsTab;\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AchievementsTab from \"../components/AchievementsTab\";\nimport GenerationTab from \"../components/GenerationTab\";\nimport ResearchTab from \"../components/ResearchTab\";\nimport SettingsTab from \"../components/SettingsTab\";\n\ntype Props = {};\n\nconst ContentPane: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>Generation</Tab>\n        <Tab>Research</Tab>\n        <Tab>Achievements</Tab>\n        <Tab>Settings</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <GenerationTab />\n        </TabPanel>\n        <TabPanel>\n          <ResearchTab />\n        </TabPanel>\n        <TabPanel>\n          <AchievementsTab />\n        </TabPanel>\n        <TabPanel>\n          <SettingsTab />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nexport default ContentPane;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { gameSlice, tick } from \"./gameSlice\";\n\nconst TICKS_PER_SECOND = 16;\n\nconst store = configureStore({\n  reducer: {\n    game: gameSlice.reducer,\n  },\n});\n\nlet tickCounter = 0;\nsetInterval(() => {\n  store.dispatch(tick(tickCounter));\n  tickCounter = (tickCounter + 1) % TICKS_PER_SECOND;\n}, 1000 / TICKS_PER_SECOND);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { ChakraProvider, Box, theme, Flex, Divider } from \"@chakra-ui/react\";\nimport SummaryPane from \"./SummaryPane\";\nimport ContentPane from \"./ContentPane\";\nimport store from \"../store/store\";\n\nconst App: React.FunctionComponent = () => (\n  <ReduxProvider store={store}>\n    <ChakraProvider theme={theme}>\n      <Box>\n        <Flex minH=\"100vh\" direction=\"row\" alignItems=\"stretch\">\n          <Box overflow=\"auto\" w={250} p={3}>\n            <SummaryPane />\n          </Box>\n          <Box>\n            <Divider orientation=\"vertical\" />\n          </Box>\n          <Box flexGrow={1} overflow=\"auto\">\n            <ContentPane />\n          </Box>\n        </Flex>\n      </Box>\n    </ChakraProvider>\n  </ReduxProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}