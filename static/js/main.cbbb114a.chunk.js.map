{"version":3,"sources":["lib/Generators.ts","lib/SerializeableBigNumber.ts","lib/costGenerator.ts","lib/Researchers.ts","store/store.ts","lib/CurrentStatistics.ts","lib/ResearchProjects.ts","store/gameSlice.ts","store/hooks.ts","layout/SummaryPane.tsx","components/AchievementsTab.tsx","components/GenerationTab.tsx","components/ResearchTab.tsx","components/SettingsTab/ColorModeSwitcher.tsx","lib/gameStateSaves.ts","components/SettingsTab/ExportedGameState.tsx","components/SettingsTab/ImportGameState.tsx","components/SettingsTab/ManualSaveButton.tsx","components/SettingsTab.tsx","layout/ContentPane.tsx","components/GameAutosaver.tsx","layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["GeneratorType","toDecimal","serialized","Decimal","fromMantissaExponent","man","exp","serializeNumber","value","decimalValue","mantissa","exponent","truncate","a","trunc","add","b","subtract","multiply","divide","max","min","compare","formatStandardNumber","maxDecimalPlaces","decimal","lt","eq","toFixed","toExponential","formatMoney","withoutCentsForWholeAmounts","linearCostGenerator","n","binomialCostGenerator","c","trinomialCostGenerator","d","ResearcherType","generatorDescriptions","hamsters","name","colorText","baseWattsPerDay","costOfNthGenerator","pinwheels","handCrank","bicycle","solarPanel","picoHydro","biomass","tidalStream","solarDish","ethanol","smallHydro","windTurbine","coal","oil","solarPowerTower","naturalGas","hydroelectricDam","nuclearFission","spaceSolarArray","nuclearFusion","dysonSphere","defaultGeneratorsState","Object","entries","reduce","acc","key","numberOwned","wattsPerDay","nextPurchaseCost","generatorTypes","sort","generatorA","generatorB","map","type","canPurchaseGenerator","cashAvailable","generator","preloadedState","researcherDescriptions","juniorResearchAssistant","baseIdeasPerDay","costOfNthResearcher","highSchoolStudent","undergraduateStudent","mastersStudent","researchAssistant","phdStudent","postdoc","assistantProf","tenuredProf","seniorResearchFellow","principalResearchFellow","nobelLauriate","defaultResearchersState","numberEmployed","ideasPerDay","researcherTypes","researcherA","researcherB","canPurchaseResearcher","researcher","defaultCurrentStatistics","daysElapsed","ticksPerDay","maxCashAvailable","totalCashEarned","cashEarnedPerDay","homesPowered","homesInPowerGrid","wattsUsedPerHomePerDay","pricePerWatt","wattsGeneratedPerDay","totalWattsSold","ideasAvailable","maxIdeasAvailable","totalIdeasGenerated","ideasGeneratedPerDay","getWattsConsumedPerTick","currentStatistics","wattsConsumedPerDay","getNextCurrentStatistics","tickCounter","getNextDaysElapsed","cashEarnedPerTick","getCashEarnedPerTick","ideasPerTick","getIdeasPerTick","updateCachedStatistics","generators","researchersState","researchers","values","calculateWattsGenerated","makePurchase","purchaseCost","expandTheGridProjects","index","types","capitalizedName","startCase","previousProject","requiresResearchProjects","cost","numHomes","Math","pow","identifier","description","applyResearch","state","salesPowerProjects","researchProjects","hasRequiredResearchProjects","researchProject","purchasedResearchProjects","purchasedSet","Set","every","rp","has","canPurchaseResearchProject","initialState","gameSlice","createSlice","reducers","tick","action","payload","updateTicksPerDay","buyGenerator","generatorType","purchaseGenerator","buyResearcher","researcherType","purchaseResearcher","purchaseResearchProject","find","project","push","resetGame","actions","selectGameState","game","selectGenerators","selectResearchers","selectTicksPerDay","selectCurrentStatistics","selectCashAvailable","selectMaxCashAvailable","selectIdeasAvailable","selectMaxIdeasAvailable","selectPurchasedResearchProjects","selectMaxCollected","selectTotalCollected","useAppDispatch","useDispatch","useAppSelector","useSelector","SummaryPane","props","percentOfHomesPowered","as","size","pb","pt","align","spacing","fontSize","color","undefined","AchievementsTab","maxCollected","totalCollected","columns","spacingX","fontWeight","GenerationTab","dispatch","generatorDescription","baseCost","onClick","disabled","minimumResearcherCost","ResearchTab","fontStyle","researcherDescription","includes","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","leftIcon","serializeGameState","gameState","btoa","JSON","stringify","deserializeGameState","serializedState","parse","atob","e","saveGameState","localStorage","setItem","chakra","useState","exportedGameState","setExportedGameState","useClipboard","hasCopied","onCopy","useEffect","position","readOnly","height","variant","colorScheme","textTransform","zIndex","top","right","setValue","toast","useToast","onChange","event","target","mt","window","confirm","parsedValue","title","status","duration","isClosable","ManualSaveButton","SettingsTab","showExportedGameState","setShowExportedGameState","showImportGameState","setShowImportGameState","process","ContentPane","preloadedGameState","savedState","getItem","loadGameState","store","configureStore","reducer","setInterval","GameAutosaver","useInterval","App","theme","minH","direction","alignItems","overflow","w","p","orientation","flexGrow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbbb114a.chunk.js","sourcesContent":["import { binomialCostGenerator, linearCostGenerator, trinomialCostGenerator } from \"./costGenerator\";\nimport { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum GeneratorType {\n  hamsters = \"hamsters\",\n  pinwheels = \"pinwheels\",\n  handCrank = \"handCrank\",\n  bicycle = \"bicycle\",\n  solarPanel = \"solarPanel\",\n  picoHydro = \"picoHydro\",\n  biomass = \"biomass\",\n  tidalStream = \"tidalStream\",\n  solarDish = \"solarDish\",\n  ethanol = \"ethanol\",\n  smallHydro = \"smallHydro\",\n  windTurbine = \"windTurbine\",\n  coal = \"coal\",\n  oil = \"oil\",\n  solarPowerTower = \"solarPowerTower\",\n  naturalGas = \"naturalGas\",\n  hydroelectricDam = \"hydroelectricDam\",\n  nuclearFission = \"nuclearFission\",\n  spaceSolarArray = \"spaceSolarArray\",\n  nuclearFusion = \"nuclearFusion\",\n  dysonSphere = \"dysonSphere\",\n}\n\nexport type GeneratorDescription = {\n  name: string;\n  colorText: string;\n  baseWattsPerDay: SerializeableBigNumber;\n  costOfNthGenerator: (n: number) => SerializeableBigNumber;\n};\n\nexport type GeneratorDescriptions = {\n  [key in GeneratorType]: GeneratorDescription;\n};\n\nexport const generatorDescriptions: GeneratorDescriptions = {\n  hamsters: {\n    name: \"Hamster\",\n    colorText: \"Watch those little legs go!\",\n    baseWattsPerDay: serializeNumber(0.5),\n    costOfNthGenerator: linearCostGenerator(0.25, 0),\n  },\n  pinwheels: {\n    name: \"Pinwheel\",\n    colorText: \"One day you'll build a great wind farm.\",\n    baseWattsPerDay: serializeNumber(3),\n    costOfNthGenerator: linearCostGenerator(1, 1),\n  },\n  handCrank: {\n    name: \"Hand Crank\",\n    colorText: \"Skip the gym and make some money.\",\n    baseWattsPerDay: serializeNumber(11),\n    costOfNthGenerator: linearCostGenerator(7, 3),\n  },\n  bicycle: {\n    name: \"Human-powered Bicycle\",\n    colorText: \"You can make it up the hill, just keep pedaling!\",\n    baseWattsPerDay: serializeNumber(127),\n    costOfNthGenerator: linearCostGenerator(31, 23),\n  },\n  solarPanel: {\n    name: \"Solar Panel\",\n    colorText: \"The photo-voltaic cells soak up the sun's rays and turn it into a modest amount of electricity.\",\n    baseWattsPerDay: serializeNumber(307),\n    costOfNthGenerator: linearCostGenerator(101, 43),\n  },\n  picoHydro: {\n    name: \"Pico Hydro\",\n    colorText: \"These small power plants generate electricity using water from nearby streams.\",\n    baseWattsPerDay: serializeNumber(1669),\n    costOfNthGenerator: linearCostGenerator(569, 83),\n  },\n  biomass: {\n    name: \"Biomass Power Plant\",\n    colorText: \"These power plants burn things like plants, trees, and even garbage to generate electricity.\",\n    baseWattsPerDay: serializeNumber(4229),\n    costOfNthGenerator: linearCostGenerator(2143, 257),\n  },\n  tidalStream: {\n    name: \"Tidal Stream Generator\",\n    colorText: \"It's like a wind turbine, for the sea!\",\n    baseWattsPerDay: serializeNumber(16_903),\n    costOfNthGenerator: linearCostGenerator(9157, 1409),\n  },\n  solarDish: {\n    name: \"Solar Dish\",\n    colorText: \"A parabolic dish that focuses energy from the sun onto a receiver.\",\n    baseWattsPerDay: serializeNumber(69_427),\n    costOfNthGenerator: linearCostGenerator(26_927, 6373),\n  },\n  ethanol: {\n    name: \"Ethanol Power Plant\",\n    colorText: \"A power plant that burns ethanol to generate electricity.\",\n    baseWattsPerDay: serializeNumber(251_393),\n    costOfNthGenerator: linearCostGenerator(94583, 18_661),\n  },\n  smallHydro: {\n    name: \"Small Hydro\",\n    colorText: \"A hydroelectric powerplant located on a small river\",\n    baseWattsPerDay: serializeNumber(969_503),\n    costOfNthGenerator: binomialCostGenerator(7, 173_431, 22_769),\n  },\n  windTurbine: {\n    name: \"Wind Turbine\",\n    colorText: \"Finally, the wind farm that you've always dreamed of!\",\n    baseWattsPerDay: serializeNumber(3_117_467),\n    costOfNthGenerator: binomialCostGenerator(31, 340_801, 83_341),\n  },\n  coal: {\n    name: \"Coal Power Plant\",\n    colorText: \"A power plant that burns coal to generate electricity. This is a bit dirty...\",\n    baseWattsPerDay: serializeNumber(12_138_481),\n    costOfNthGenerator: binomialCostGenerator(101, 999_983, 243_197),\n  },\n  oil: {\n    name: \"Oil Power Plant\",\n    colorText: \"A power plant that burns oil to generate electricity.\",\n    baseWattsPerDay: serializeNumber(42_666_601),\n    costOfNthGenerator: binomialCostGenerator(569, 2_804_569, 976_909),\n  },\n  solarPowerTower: {\n    name: \"Solar Power Tower\",\n    colorText: \"A collection of mirrors that focus sunlight on a central tower to generate heat.\",\n    baseWattsPerDay: serializeNumber(369_671_453),\n    costOfNthGenerator: binomialCostGenerator(2143, 9_009_163, 3_914_269),\n  },\n  naturalGas: {\n    name: \"Natural Gas Power Plant\",\n    colorText: \"A power plant that burns natural gas to generate electricity.\",\n    baseWattsPerDay: serializeNumber(2_429_698_879),\n    costOfNthGenerator: binomialCostGenerator(9157, 32_046_979, 15_662_723),\n  },\n  hydroelectricDam: {\n    name: \"Hydroelectric Dam\",\n    colorText: \"A large hydroelectric dam that generates a large amount of power.\",\n    baseWattsPerDay: serializeNumber(9_679_695_049),\n    costOfNthGenerator: binomialCostGenerator(26927, 132_045_167, 62_659_657),\n  },\n  nuclearFission: {\n    name: \"Nuclear Fission Reactor\",\n    colorText: \"A power plant that uses controlled nuclear fission reactions to generate electricity.\",\n    baseWattsPerDay: serializeNumber(31_679_723_617),\n    costOfNthGenerator: trinomialCostGenerator(7, 94583, 373_202_677, 250_641_211),\n  },\n  spaceSolarArray: {\n    name: \"Space Solar Panel Array\",\n    colorText: \"With nothing in the way, we can generate even more solar power!\",\n    baseWattsPerDay: serializeNumber(187_679_724_691),\n    costOfNthGenerator: trinomialCostGenerator(31, 173431, 923_212_441, 1_002_572_119),\n  },\n  nuclearFusion: {\n    name: \"Nuclear Fusion Reactor\",\n    colorText: \"An even more efficient form of nuclear power.\",\n    baseWattsPerDay: serializeNumber(969_679_760_479),\n    costOfNthGenerator: trinomialCostGenerator(101, 340801, 2_735_208_481, 4_010_292_701),\n  },\n  dysonSphere: {\n    name: \"Dyson Sphere\",\n    colorText: \"Capture energy from stars across the universe.\",\n    baseWattsPerDay: serializeNumber(42_000_000_000_000),\n    costOfNthGenerator: trinomialCostGenerator(569, 999983, 6_135_210_871, 16_041_259_051),\n  },\n};\n\nexport type GeneratorState = {\n  numberOwned: number;\n  wattsPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type GeneratorsState = {\n  [key in GeneratorType]: GeneratorState;\n};\n\nexport const defaultGeneratorsState: GeneratorsState = Object.entries(generatorDescriptions).reduce(\n  (acc, [key, value]) => {\n    acc[key as GeneratorType] = {\n      numberOwned: 0,\n      wattsPerDay: value.baseWattsPerDay,\n      nextPurchaseCost: value.costOfNthGenerator(1),\n    };\n    return acc;\n  },\n  {} as GeneratorsState,\n);\n\nexport const generatorTypes = Object.entries(defaultGeneratorsState)\n  .sort(([typeA, generatorA], [typeB, generatorB]) => compare(generatorA.nextPurchaseCost, generatorB.nextPurchaseCost))\n  .map(([type, generator]) => type as GeneratorType) as Array<GeneratorType>;\n\nexport const canPurchaseGenerator = (cashAvailable: SerializeableBigNumber, generator: GeneratorState): boolean =>\n  compare(cashAvailable, generator.nextPurchaseCost) !== -1;\n\nexport const purchaseGenerator = (generatorType: GeneratorType, generator: GeneratorState): GeneratorState => {\n  const { numberOwned } = generator;\n\n  const nextPurchaseCost = generatorDescriptions[generatorType].costOfNthGenerator(numberOwned + 2);\n\n  return {\n    ...generator,\n    numberOwned: numberOwned + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateWattsGenerated = (generators: GeneratorsState): SerializeableBigNumber =>\n  Object.values(generators).reduce(\n    (acc, generator) => add(acc, multiply(serializeNumber(generator.numberOwned), generator.wattsPerDay)),\n    serializeNumber(0),\n  );\n","import Decimal, { DecimalSource } from \"break_infinity.js\";\n\nexport type SerializeableBigNumber = {\n  man: number;\n  exp: number;\n};\n\nconst toDecimal = (serialized: SerializeableBigNumber): Decimal =>\n  Decimal.fromMantissaExponent(serialized.man, serialized.exp);\n\nexport const serializeNumber = (value: DecimalSource): SerializeableBigNumber => {\n  const decimalValue = new Decimal(value);\n\n  return {\n    man: decimalValue.mantissa,\n    exp: decimalValue.exponent,\n  };\n};\n\nexport const truncate = (a: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.trunc(toDecimal(a)));\n\nexport const add = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.add(toDecimal(a), toDecimal(b)));\n\nexport const subtract = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.subtract(toDecimal(a), toDecimal(b)));\n\nexport const multiply = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.multiply(toDecimal(a), toDecimal(b)));\n\nexport const divide = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.divide(toDecimal(a), toDecimal(b)));\n\nexport const max = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.max(toDecimal(a), toDecimal(b)));\n\nexport const min = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.min(toDecimal(a), toDecimal(b)));\n\nexport const compare = (a: SerializeableBigNumber, b: SerializeableBigNumber): number =>\n  Decimal.compare(toDecimal(a), toDecimal(b));\n\nexport const formatSerializeableBigNumber = (a: SerializeableBigNumber): string => toDecimal(a).toString();\n\nexport const formatStandardNumber = (a: SerializeableBigNumber, maxDecimalPlaces: number = 1): string => {\n  const decimal = toDecimal(a);\n\n  if (decimal.lt(new Decimal(10000))) {\n    if (decimal.trunc().eq(decimal)) {\n      return decimal.toFixed(0);\n    } else {\n      return decimal.toFixed(maxDecimalPlaces);\n    }\n  } else {\n    return decimal.toExponential(3);\n  }\n};\n\nexport const formatMoney = (a: SerializeableBigNumber, withoutCentsForWholeAmounts: boolean = false): string => {\n  const decimal = toDecimal(a);\n\n  if (decimal.lt(new Decimal(1000))) {\n    if (withoutCentsForWholeAmounts && decimal.trunc().eq(decimal)) {\n      return decimal.toFixed(0);\n    } else {\n      return decimal.toFixed(2);\n    }\n  } else {\n    return decimal.toExponential(3);\n  }\n};\n","import { serializeNumber } from \"./SerializeableBigNumber\";\n\nexport const linearCostGenerator = (a: number, b: number) => (n: number) => serializeNumber(a * n + b);\n\nexport const binomialCostGenerator = (a: number, b: number, c: number) => (n: number) =>\n  serializeNumber(a * n * n + b * n + c);\n\nexport const trinomialCostGenerator = (a: number, b: number, c: number, d: number) => (n: number) =>\n  serializeNumber(a * n * n * n + b * n * n + c * n + d);\n","import { linearCostGenerator } from \"./costGenerator\";\nimport { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum ResearcherType {\n  juniorResearchAssistant = \"juniorResearchAssistant\",\n  highSchoolStudent = \"highSchoolStudent\",\n  undergraduateStudent = \"undergraduateStudent\",\n  mastersStudent = \"mastersStudent\",\n  researchAssistant = \"researchAssistant\",\n  phdStudent = \"phdStudent\",\n  postdoc = \"postdoc\",\n  assistantProf = \"assistantProf\",\n  tenuredProf = \"tenuredProf\",\n  seniorResearchFellow = \"seniorResearchFellow\",\n  principalResearchFellow = \"principalResearchFellow\",\n  nobelLauriate = \"nobelLauriate\",\n}\n\nexport type ResearcherDescription = {\n  name: string;\n  colorText: string;\n  baseIdeasPerDay: SerializeableBigNumber;\n  costOfNthResearcher: (n: number) => SerializeableBigNumber;\n};\n\nexport type ResearcherDescriptions = {\n  [key in ResearcherType]: ResearcherDescription;\n};\n\nexport const researcherDescriptions: ResearcherDescriptions = {\n  juniorResearchAssistant: {\n    name: '\"Junior\" Research Assistant',\n    colorText: \"Maybe recruiting your 12 year old cousin wasn't the best idea.\",\n    baseIdeasPerDay: serializeNumber(0.5),\n    costOfNthResearcher: linearCostGenerator(2, 3),\n  },\n  highSchoolStudent: {\n    name: \"High School Student\",\n    colorText: \"The honors students from your high school are interested in your project. They might be helpful.\",\n    baseIdeasPerDay: serializeNumber(3),\n    costOfNthResearcher: linearCostGenerator(11, 13),\n  },\n  undergraduateStudent: {\n    name: \"Undergraduate Student\",\n    colorText: \"Undergraduate interns can help speed up your progress cheaply.\",\n    baseIdeasPerDay: serializeNumber(13),\n    costOfNthResearcher: linearCostGenerator(43, 23),\n  },\n  mastersStudent: {\n    name: \"Masters Student\",\n    colorText: \"More educated and enthusiastic, masters students will accelerate your progress.\",\n    baseIdeasPerDay: serializeNumber(41),\n    costOfNthResearcher: linearCostGenerator(191, 89),\n  },\n  researchAssistant: {\n    name: \"Research Assistant\",\n    colorText: \"Full-time staff that are the workhorse of your research department.\",\n    baseIdeasPerDay: serializeNumber(109),\n    costOfNthResearcher: linearCostGenerator(977, 457),\n  },\n  phdStudent: {\n    name: \"PhD Student\",\n    colorText: \"Students that have dedicated their life to the field.\",\n    baseIdeasPerDay: serializeNumber(317),\n    costOfNthResearcher: linearCostGenerator(4861, 2339),\n  },\n  postdoc: {\n    name: \"Postdoc Research Fellow\",\n    colorText: \"After graduating with their PhD, they are preparing for the rest of their careers as researchers.\",\n    baseIdeasPerDay: serializeNumber(1259),\n    costOfNthResearcher: linearCostGenerator(27277, 13967),\n  },\n  assistantProf: {\n    name: \"Assistant Professor\",\n    colorText: \"Professors starting their career path towards tenure.\",\n    baseIdeasPerDay: serializeNumber(3769),\n    costOfNthResearcher: linearCostGenerator(142799, 72383),\n  },\n  tenuredProf: {\n    name: \"Tenured Professor\",\n    colorText:\n      \"The highest ranking professors, they bring along their own student researchers to help speed up their work.\",\n    baseIdeasPerDay: serializeNumber(12721),\n    costOfNthResearcher: linearCostGenerator(721451, 362237),\n  },\n  seniorResearchFellow: {\n    name: \"Senior Research Fellow\",\n    colorText: \"Full-time, highly trained researchers.\",\n    baseIdeasPerDay: serializeNumber(39541),\n    costOfNthResearcher: linearCostGenerator(3607255, 1804813),\n  },\n  principalResearchFellow: {\n    name: \"Principal Research Fellow\",\n    colorText: \"Even more senior full-time researchers.\",\n    baseIdeasPerDay: serializeNumber(121883),\n    costOfNthResearcher: linearCostGenerator(18039319, 9025013),\n  },\n  nobelLauriate: {\n    name: \"Nobel Lauriate\",\n    colorText: \"Scientists that have won the most prestigious award in their field, they are worth every penny.\",\n    baseIdeasPerDay: serializeNumber(549641),\n    costOfNthResearcher: linearCostGenerator(90205261, 451031871),\n  },\n};\n\nexport type ResearcherState = {\n  numberEmployed: number;\n  ideasPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type ResearchersState = {\n  [key in ResearcherType]: ResearcherState;\n};\n\nexport const defaultResearchersState: ResearchersState = Object.entries(researcherDescriptions).reduce(\n  (acc, [key, value]) => {\n    acc[key as ResearcherType] = {\n      numberEmployed: 0,\n      ideasPerDay: value.baseIdeasPerDay,\n      nextPurchaseCost: value.costOfNthResearcher(1),\n    };\n    return acc;\n  },\n  {} as ResearchersState,\n);\n\nexport const researcherTypes = Object.entries(defaultResearchersState)\n  .sort(([typeA, researcherA], [typeB, researcherB]) =>\n    compare(researcherA.nextPurchaseCost, researcherB.nextPurchaseCost),\n  )\n  .map(([type, researcher]) => type as ResearcherType) as Array<ResearcherType>;\n\nexport const canPurchaseResearcher = (cashAvailable: SerializeableBigNumber, researcher: ResearcherState): boolean =>\n  compare(cashAvailable, researcher.nextPurchaseCost) !== -1;\n\nexport const purchaseResearcher = (researcherType: ResearcherType, researcher: ResearcherState): ResearcherState => {\n  const { numberEmployed } = researcher;\n\n  const nextPurchaseCost = researcherDescriptions[researcherType].costOfNthResearcher(numberEmployed + 2);\n\n  return {\n    ...researcher,\n    numberEmployed: numberEmployed + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateIdeasCreated = (researchers: ResearchersState): SerializeableBigNumber =>\n  Object.values(researchers).reduce(\n    (acc, researcher) => add(acc, multiply(serializeNumber(researcher.numberEmployed), researcher.ideasPerDay)),\n    serializeNumber(0),\n  );\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { loadGameState } from \"../lib/gameStateSaves\";\nimport { gameSlice, tick } from \"./gameSlice\";\n\nconst TICKS_PER_SECOND = 16;\n\nconst preloadedGameState = loadGameState();\n\nlet preloadedState;\nif (preloadedGameState) {\n  preloadedState = {\n    game: preloadedGameState,\n  };\n}\n\nconst store = configureStore({\n  preloadedState,\n  reducer: {\n    game: gameSlice.reducer,\n  },\n});\n\nlet tickCounter = 0;\nsetInterval(() => {\n  store.dispatch(tick(tickCounter));\n  tickCounter = (tickCounter + 1) % TICKS_PER_SECOND;\n}, 1000 / TICKS_PER_SECOND);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { calculateWattsGenerated, GeneratorsState } from \"./Generators\";\nimport { calculateIdeasCreated, ResearchersState } from \"./Researchers\";\nimport {\n  SerializeableBigNumber,\n  serializeNumber,\n  add,\n  multiply,\n  divide,\n  min,\n  max,\n  subtract,\n} from \"./SerializeableBigNumber\";\n\nexport type CurrentStatistics = {\n  daysElapsed: SerializeableBigNumber;\n  ticksPerDay: number;\n\n  cashAvailable: SerializeableBigNumber;\n  maxCashAvailable: SerializeableBigNumber;\n  totalCashEarned: SerializeableBigNumber;\n  cashEarnedPerDay: SerializeableBigNumber;\n\n  homesPowered: SerializeableBigNumber;\n  homesInPowerGrid: SerializeableBigNumber;\n  wattsUsedPerHomePerDay: SerializeableBigNumber;\n\n  pricePerWatt: SerializeableBigNumber;\n  wattsGeneratedPerDay: SerializeableBigNumber;\n  totalWattsSold: SerializeableBigNumber;\n\n  ideasAvailable: SerializeableBigNumber;\n  maxIdeasAvailable: SerializeableBigNumber;\n  totalIdeasGenerated: SerializeableBigNumber;\n  ideasGeneratedPerDay: SerializeableBigNumber;\n};\n\nexport const defaultCurrentStatistics: CurrentStatistics = {\n  daysElapsed: serializeNumber(0),\n  ticksPerDay: 16,\n\n  cashAvailable: serializeNumber(1),\n  maxCashAvailable: serializeNumber(0),\n  totalCashEarned: serializeNumber(0),\n  cashEarnedPerDay: serializeNumber(0),\n\n  homesPowered: serializeNumber(0),\n  homesInPowerGrid: serializeNumber(1),\n  wattsUsedPerHomePerDay: serializeNumber(20),\n\n  pricePerWatt: serializeNumber(0.03),\n  wattsGeneratedPerDay: serializeNumber(0),\n  totalWattsSold: serializeNumber(0),\n\n  ideasAvailable: serializeNumber(0),\n  maxIdeasAvailable: serializeNumber(0),\n  totalIdeasGenerated: serializeNumber(0),\n  ideasGeneratedPerDay: serializeNumber(0),\n};\n\nconst getNextDaysElapsed = (currentStatistics: CurrentStatistics, tickCounter: number): SerializeableBigNumber => {\n  const { daysElapsed, ticksPerDay } = currentStatistics;\n\n  if (tickCounter % ticksPerDay === 0) {\n    return add(daysElapsed, serializeNumber(1));\n  } else {\n    return daysElapsed;\n  }\n};\n\nconst getWattsConsumedPerTick = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { ticksPerDay, homesInPowerGrid, wattsUsedPerHomePerDay, wattsGeneratedPerDay } = currentStatistics;\n\n  const wattsConsumedPerDay = min(wattsGeneratedPerDay, multiply(homesInPowerGrid, wattsUsedPerHomePerDay));\n\n  return divide(wattsConsumedPerDay, serializeNumber(ticksPerDay));\n};\n\nconst getCashEarnedPerTick = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { pricePerWatt } = currentStatistics;\n\n  return multiply(getWattsConsumedPerTick(currentStatistics), pricePerWatt);\n};\n\nconst getIdeasPerTick = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const { ticksPerDay, ideasGeneratedPerDay } = currentStatistics;\n\n  return divide(ideasGeneratedPerDay, serializeNumber(ticksPerDay));\n};\n\nexport const getNextCurrentStatistics = (\n  currentStatistics: CurrentStatistics,\n  tickCounter: number,\n): CurrentStatistics => {\n  const daysElapsed = getNextDaysElapsed(currentStatistics, tickCounter);\n\n  const cashEarnedPerTick = getCashEarnedPerTick(currentStatistics);\n  const cashAvailable = add(currentStatistics.cashAvailable, cashEarnedPerTick);\n  const totalCashEarned = add(currentStatistics.totalCashEarned, cashEarnedPerTick);\n  const maxCashAvailable = max(cashAvailable, currentStatistics.maxCashAvailable);\n\n  const ideasPerTick = getIdeasPerTick(currentStatistics);\n  const ideasAvailable = add(currentStatistics.ideasAvailable, ideasPerTick);\n  const totalIdeasGenerated = add(currentStatistics.totalIdeasGenerated, ideasPerTick);\n  const maxIdeasAvailable = max(ideasAvailable, currentStatistics.maxIdeasAvailable);\n\n  const totalWattsSold = add(currentStatistics.totalWattsSold, getWattsConsumedPerTick(currentStatistics));\n\n  return {\n    ...currentStatistics,\n    daysElapsed,\n    cashAvailable,\n    maxCashAvailable,\n    totalCashEarned,\n    ideasAvailable,\n    maxIdeasAvailable,\n    totalIdeasGenerated,\n    totalWattsSold,\n  };\n};\n\nexport const updateCachedStatistics = (\n  currentStatistics: CurrentStatistics,\n  generators: GeneratorsState,\n  researchersState: ResearchersState,\n) => {\n  const wattsGeneratedPerDay = calculateWattsGenerated(generators);\n  const wattsConsumedPerDay = min(\n    wattsGeneratedPerDay,\n    multiply(currentStatistics.homesInPowerGrid, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const cashEarnedPerDay = multiply(wattsConsumedPerDay, currentStatistics.pricePerWatt);\n  const homesPowered = min(\n    currentStatistics.homesInPowerGrid,\n    divide(wattsGeneratedPerDay, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const ideasGeneratedPerDay = calculateIdeasCreated(researchersState);\n\n  return { ...currentStatistics, cashEarnedPerDay, homesPowered, wattsGeneratedPerDay, ideasGeneratedPerDay };\n};\n\nexport const makePurchase = (\n  currentStatistics: CurrentStatistics,\n  purchaseCost: SerializeableBigNumber,\n): CurrentStatistics => {\n  const cashAvailable = subtract(currentStatistics.cashAvailable, purchaseCost);\n  currentStatistics.cashAvailable = cashAvailable;\n  return currentStatistics;\n};\n","import { startCase } from \"lodash\";\nimport { GameState } from \"../store/gameSlice\";\nimport {\n  compare,\n  formatMoney,\n  formatStandardNumber,\n  SerializeableBigNumber,\n  serializeNumber,\n  truncate,\n} from \"./SerializeableBigNumber\";\n\nexport type ResearchProjectDescription = {\n  identifier: string;\n  name: string;\n  description: string;\n  cost: SerializeableBigNumber;\n  requiresResearchProjects: Array<string>;\n  applyResearch: (state: GameState) => GameState;\n};\n\nconst expandTheGridProjects: Array<ResearchProjectDescription> = [\n  \"street\",\n  \"neighborhood\",\n  \"town\",\n  \"city\",\n  \"state\",\n  \"country\",\n  \"continent\",\n  \"planet\",\n  \"galaxy\",\n  \"universe\",\n  \"multiverse\",\n].map((type, index, types) => {\n  const capitalizedName = startCase(type);\n\n  const previousProject = types[index - 1];\n  let requiresResearchProjects: Array<string> = [];\n  if (previousProject) {\n    requiresResearchProjects = [`expandGrid_${previousProject}`];\n  }\n\n  let cost = serializeNumber(100);\n  if (index === 0) {\n    cost = serializeNumber(100);\n  } else if (index === 1) {\n    cost = serializeNumber(2500);\n  } else if (index === 2) {\n    cost = serializeNumber(10301);\n  } else {\n    cost = truncate(\n      serializeNumber(\n        14257681 * (index - 3) * (index - 3) * (index - 3) + 25667 * (index - 2) * (index - 2) + 8647 * index,\n      ),\n    );\n  }\n\n  const numHomes = serializeNumber(Math.pow(10, index + 1));\n\n  return {\n    identifier: `expandGrid_${type}`,\n    name: `Power the ${capitalizedName}`,\n    description: `Expand your power grid to provide power to the ${type}, having ${formatStandardNumber(\n      numHomes,\n      0,\n    )} homes`,\n    cost,\n    requiresResearchProjects,\n    applyResearch: (state) => {\n      state.currentStatistics.homesInPowerGrid = numHomes;\n      return state;\n    },\n  };\n});\n\nconst salesPowerProjects: Array<ResearchProjectDescription> = [\n  \"basic\",\n  \"beginner\",\n  \"intermediate\",\n  \"advanced\",\n  \"professional\",\n  \"excellent\",\n  \"award-winning\",\n  \"world-renown\",\n].map((type, index, types) => {\n  const capitalizedName = startCase(type);\n\n  const previousProject = types[index - 1];\n  let requiresResearchProjects: Array<string> = [];\n  if (previousProject) {\n    requiresResearchProjects = [`salesPower_${previousProject}`];\n  }\n\n  let cost = serializeNumber(500);\n  if (index === 0) {\n    cost = serializeNumber(500);\n  } else if (index === 1) {\n    cost = serializeNumber(7500);\n  } else if (index === 2) {\n    cost = serializeNumber(19739);\n  } else {\n    cost = truncate(\n      serializeNumber(\n        34260761 * (index - 3) * (index - 3) * (index - 3) + 47501 * (index - 2) * (index - 2) + 8647 * index,\n      ),\n    );\n  }\n\n  const pricePerWatt = serializeNumber(0.03 + 0.01 * (index + 1) + 0.01 * (index * index));\n\n  return {\n    identifier: `salesPower_${type}`,\n    name: `${capitalizedName} Sales`,\n    description: `Hire ${type} sales people to increase the price per watt to $${formatMoney(pricePerWatt)}`,\n    cost,\n    requiresResearchProjects,\n    applyResearch: (state) => {\n      state.currentStatistics.pricePerWatt = pricePerWatt;\n      return state;\n    },\n  };\n});\n\nexport const researchProjects: Array<ResearchProjectDescription> = [...expandTheGridProjects, ...salesPowerProjects];\n\nexport const hasRequiredResearchProjects = (\n  researchProject: ResearchProjectDescription,\n  purchasedResearchProjects: Array<string>,\n): boolean => {\n  const purchasedSet = new Set(purchasedResearchProjects);\n  return researchProject.requiresResearchProjects.every((rp) => purchasedSet.has(rp));\n};\n\nexport const canPurchaseResearchProject = (\n  ideasAvailable: SerializeableBigNumber,\n  researchProject: ResearchProjectDescription,\n  purchasedResearchProjects: Array<string>,\n): boolean => {\n  if (compare(ideasAvailable, researchProject.cost) === -1) {\n    return false;\n  }\n  return hasRequiredResearchProjects(researchProject, purchasedResearchProjects);\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  getNextCurrentStatistics,\n  CurrentStatistics,\n  defaultCurrentStatistics,\n  updateCachedStatistics,\n  makePurchase,\n} from \"../lib/CurrentStatistics\";\nimport {\n  canPurchaseGenerator,\n  defaultGeneratorsState,\n  GeneratorsState,\n  GeneratorType,\n  purchaseGenerator,\n} from \"../lib/Generators\";\nimport {\n  canPurchaseResearcher,\n  defaultResearchersState,\n  purchaseResearcher,\n  ResearchersState,\n  ResearcherType,\n} from \"../lib/Researchers\";\nimport { canPurchaseResearchProject, researchProjects } from \"../lib/ResearchProjects\";\nimport { subtract } from \"../lib/SerializeableBigNumber\";\nimport { RootState } from \"./store\";\n\nexport interface GameState {\n  currentStatistics: CurrentStatistics;\n  generators: GeneratorsState;\n  researchers: ResearchersState;\n  purchasedResearchProjects: Array<string>;\n}\n\nconst initialState: GameState = {\n  currentStatistics: defaultCurrentStatistics,\n  generators: defaultGeneratorsState,\n  researchers: defaultResearchersState,\n  purchasedResearchProjects: [],\n};\n\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    tick: (state, action: PayloadAction<number>) => {\n      state.currentStatistics = getNextCurrentStatistics(state.currentStatistics, action.payload);\n    },\n\n    updateTicksPerDay: (state, action: PayloadAction<number>) => {\n      state.currentStatistics.ticksPerDay = action.payload;\n    },\n\n    buyGenerator: (state, action: PayloadAction<GeneratorType>) => {\n      const generatorType = action.payload;\n\n      const { currentStatistics, generators, researchers } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const generator = generators[generatorType];\n\n      if (canPurchaseGenerator(cashAvailable, generator)) {\n        const purchaseCost = generator.nextPurchaseCost;\n\n        state.generators[generatorType] = purchaseGenerator(generatorType, generator);\n        state.currentStatistics = makePurchase(currentStatistics, purchaseCost);\n        state.currentStatistics = updateCachedStatistics(currentStatistics, generators, researchers);\n      }\n    },\n\n    buyResearcher: (state, action: PayloadAction<ResearcherType>) => {\n      const researcherType = action.payload;\n\n      const { currentStatistics, generators, researchers } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const researcher = researchers[researcherType];\n\n      if (canPurchaseResearcher(cashAvailable, researcher)) {\n        const purchaseCost = researcher.nextPurchaseCost;\n\n        state.researchers[researcherType] = purchaseResearcher(researcherType, researcher);\n        state.currentStatistics = makePurchase(currentStatistics, purchaseCost);\n        state.currentStatistics = updateCachedStatistics(currentStatistics, generators, researchers);\n      }\n    },\n\n    purchaseResearchProject: (state, action: PayloadAction<string>) => {\n      const researchProject = researchProjects.find((project) => project.identifier === action.payload);\n\n      if (\n        researchProject &&\n        canPurchaseResearchProject(\n          state.currentStatistics.ideasAvailable,\n          researchProject,\n          state.purchasedResearchProjects,\n        )\n      ) {\n        state = researchProject.applyResearch(state);\n        state.currentStatistics.ideasAvailable = subtract(state.currentStatistics.ideasAvailable, researchProject.cost);\n        state.purchasedResearchProjects.push(action.payload);\n        state.currentStatistics = updateCachedStatistics(state.currentStatistics, state.generators, state.researchers);\n      }\n    },\n\n    resetGame: (state, action: PayloadAction<GameState | undefined>) => {\n      if (action.payload) {\n        return action.payload;\n      }\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  tick,\n  buyGenerator,\n  buyResearcher,\n  purchaseResearchProject,\n  updateTicksPerDay,\n  resetGame,\n} = gameSlice.actions;\n\nexport const selectGameState = (state: RootState) => state.game;\n\nexport const selectGenerators = (state: RootState) => state.game.generators;\nexport const selectResearchers = (state: RootState) => state.game.researchers;\n\nexport const selectTicksPerDay = (state: RootState) => state.game.currentStatistics.ticksPerDay;\n\nexport const selectCurrentStatistics = (state: RootState) => state.game.currentStatistics;\nexport const selectCashAvailable = (state: RootState) => state.game.currentStatistics.cashAvailable;\nexport const selectMaxCashAvailable = (state: RootState) => state.game.currentStatistics.maxCashAvailable;\n\nexport const selectIdeasAvailable = (state: RootState) => state.game.currentStatistics.ideasAvailable;\nexport const selectMaxIdeasAvailable = (state: RootState) => state.game.currentStatistics.maxIdeasAvailable;\nexport const selectPurchasedResearchProjects = (state: RootState) => state.game.purchasedResearchProjects;\n\nexport const selectMaxCollected = (state: RootState) => ({\n  maxCashAvailable: state.game.currentStatistics.maxCashAvailable,\n  maxIdeasAvailable: state.game.currentStatistics.maxIdeasAvailable,\n});\n\nexport const selectTotalCollected = (state: RootState) => ({\n  totalCashEarned: state.game.currentStatistics.totalCashEarned,\n  totalIdeasGenerated: state.game.currentStatistics.totalIdeasGenerated,\n  totalWattsSold: state.game.currentStatistics.totalWattsSold,\n});\n\nexport default gameSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { divide, multiply, serializeNumber, formatStandardNumber, formatMoney } from \"../lib/SerializeableBigNumber\";\nimport { selectCurrentStatistics } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst SummaryPane: React.FunctionComponent<Props> = (props) => {\n  const currentStatistics = useAppSelector(selectCurrentStatistics);\n\n  const {\n    daysElapsed,\n    cashAvailable,\n    cashEarnedPerDay,\n    homesPowered,\n    homesInPowerGrid,\n    wattsUsedPerHomePerDay,\n    pricePerWatt,\n    wattsGeneratedPerDay,\n    ideasAvailable,\n    ideasGeneratedPerDay,\n  } = currentStatistics;\n\n  const percentOfHomesPowered = multiply(serializeNumber(100), divide(homesPowered, homesInPowerGrid));\n\n  return (\n    <>\n      <Heading as=\"h1\" size=\"md\" pb={2}>\n        Keep the Lights On\n      </Heading>\n      <VStack pt={4} align=\"stretch\" spacing={4}>\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Time Elapsed\n          </Heading>\n          <Text>{formatStandardNumber(daysElapsed)} days</Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Funds\n          </Heading>\n          <Text pb={1}>${formatMoney(cashAvailable)}</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatMoney(cashEarnedPerDay)} per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Power Generation\n          </Heading>\n          <Text pb={1}>{formatStandardNumber(wattsGeneratedPerDay)} watts per day</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatMoney(pricePerWatt)} per watt\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Houses Illuminated\n          </Heading>\n          <Text pb={1}>\n            {formatStandardNumber(homesPowered, 2)} / {formatStandardNumber(homesInPowerGrid)}\n          </Text>\n          <Text pb={1} color={homesPowered === homesInPowerGrid ? undefined : \"red.500\"}>\n            {formatStandardNumber(percentOfHomesPowered)}%\n          </Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatStandardNumber(wattsUsedPerHomePerDay)} watts used per house per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Research\n          </Heading>\n          <Text pb={1}>{formatStandardNumber(ideasAvailable)} ideas</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatStandardNumber(ideasGeneratedPerDay)} ideas per day\n          </Text>\n        </StackItem>\n      </VStack>\n    </>\n  );\n};\n\nexport default SummaryPane;\n","import { Heading, SimpleGrid, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { formatMoney, formatStandardNumber } from \"../lib/SerializeableBigNumber\";\nimport { selectMaxCollected, selectTotalCollected } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst AchievementsTab: React.FunctionComponent<Props> = (props) => {\n  const maxCollected = useAppSelector(selectMaxCollected);\n  const totalCollected = useAppSelector(selectTotalCollected);\n\n  return (\n    <VStack align=\"flex-start\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={2}>\n          Statistics\n        </Heading>\n        <SimpleGrid columns={2} spacingX={4}>\n          <Text fontWeight=\"bold\">Max cash available</Text>\n          <Text>${formatMoney(maxCollected.maxCashAvailable)}</Text>\n          <Text fontWeight=\"bold\">Total cash earned</Text>\n          <Text>${formatMoney(totalCollected.totalCashEarned)}</Text>\n          <Text fontWeight=\"bold\">Max ideas available</Text>\n          <Text>{formatStandardNumber(maxCollected.maxIdeasAvailable)} ideas</Text>\n          <Text fontWeight=\"bold\">Total ideas created</Text>\n          <Text>{formatStandardNumber(totalCollected.totalIdeasGenerated)} ideas</Text>\n          <Text fontWeight=\"bold\">Total power sold</Text>\n          <Text>{formatStandardNumber(totalCollected.totalWattsSold)} watts</Text>\n        </SimpleGrid>\n      </StackItem>\n    </VStack>\n  );\n};\n\nexport default AchievementsTab;\n","import { Button, Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { canPurchaseGenerator, defaultGeneratorsState, generatorDescriptions, generatorTypes } from \"../lib/Generators\";\nimport { compare, formatStandardNumber, formatMoney, multiply, serializeNumber } from \"../lib/SerializeableBigNumber\";\nimport { buyGenerator, selectCashAvailable, selectGenerators, selectMaxCashAvailable } from \"../store/gameSlice\";\nimport { useAppSelector, useAppDispatch } from \"../store/hooks\";\n\ntype Props = {};\n\nconst GenerationTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n  const generators = useAppSelector(selectGenerators);\n\n  return (\n    <VStack align=\"stretch\" spacing={4}>\n      {generatorTypes.map((generatorType) => {\n        const generator = generators[generatorType];\n        const generatorDescription = generatorDescriptions[generatorType];\n        const baseCost = defaultGeneratorsState[generatorType].nextPurchaseCost;\n\n        if (compare(maxCashAvailable, multiply(serializeNumber(0.75), baseCost)) === -1) {\n          return null;\n        }\n\n        return (\n          <StackItem key={generatorType}>\n            <Heading as=\"h2\" size=\"sm\" pb={1}>\n              {generatorDescription.name} x {generator.numberOwned}\n            </Heading>\n            <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n              Generates {formatStandardNumber(generator.wattsPerDay)} watts per day -- {generatorDescription.colorText}\n            </Text>\n            <Button\n              onClick={() => dispatch(buyGenerator(generatorType))}\n              disabled={!canPurchaseGenerator(cashAvailable, generator)}\n            >\n              Buy for ${formatMoney(generator.nextPurchaseCost, true)}\n            </Button>\n          </StackItem>\n        );\n      })}\n    </VStack>\n  );\n};\n\nexport default GenerationTab;\n","import { Button, Heading, StackItem, VStack, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport {\n  researcherTypes,\n  researcherDescriptions,\n  canPurchaseResearcher,\n  ResearcherType,\n  defaultResearchersState,\n} from \"../lib/Researchers\";\nimport { canPurchaseResearchProject, hasRequiredResearchProjects, researchProjects } from \"../lib/ResearchProjects\";\nimport { compare, multiply, serializeNumber, formatStandardNumber, formatMoney } from \"../lib/SerializeableBigNumber\";\nimport {\n  selectCashAvailable,\n  selectMaxCashAvailable,\n  buyResearcher,\n  selectResearchers,\n  purchaseResearchProject,\n  selectIdeasAvailable,\n  selectMaxIdeasAvailable,\n  selectPurchasedResearchProjects,\n} from \"../store/gameSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\n\nconst minimumResearcherCost = multiply(\n  serializeNumber(0.75),\n  defaultResearchersState[ResearcherType.juniorResearchAssistant].nextPurchaseCost,\n);\n\ntype Props = {};\n\nconst ResearchTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n\n  const ideasAvailable = useAppSelector(selectIdeasAvailable);\n  const maxIdeasAvailable = useAppSelector(selectMaxIdeasAvailable);\n\n  const researchers = useAppSelector(selectResearchers);\n  const purchasedResearchProjects = useAppSelector(selectPurchasedResearchProjects);\n\n  if (compare(maxCashAvailable, minimumResearcherCost) !== 1) {\n    return (\n      <Text fontStyle=\"italic\" color=\"gray.400\">\n        If you collect enough money, maybe you can hire staff to research improvements.\n      </Text>\n    );\n  }\n\n  return (\n    <VStack align=\"stretch\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={4}>\n          Researchers\n        </Heading>\n        <VStack align=\"stretch\" spacing={4}>\n          {researcherTypes.map((researcherType) => {\n            const researcher = researchers[researcherType];\n            const researcherDescription = researcherDescriptions[researcherType];\n            const baseCost = defaultResearchersState[researcherType].nextPurchaseCost;\n\n            if (compare(maxCashAvailable, multiply(serializeNumber(0.75), baseCost)) === -1) {\n              return null;\n            }\n\n            return (\n              <StackItem key={researcherType}>\n                <Heading as=\"h3\" size=\"sm\" pb={1}>\n                  {researcherDescription.name} x {researcher.numberEmployed}\n                </Heading>\n                <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n                  Generates {formatStandardNumber(researcher.ideasPerDay)} ideas per day --{\" \"}\n                  {researcherDescription.colorText}\n                </Text>\n                <Button\n                  onClick={() => dispatch(buyResearcher(researcherType))}\n                  disabled={!canPurchaseResearcher(cashAvailable, researcher)}\n                >\n                  Hire for ${formatMoney(researcher.nextPurchaseCost, true)}\n                </Button>\n              </StackItem>\n            );\n          })}\n        </VStack>\n      </StackItem>\n\n      <StackItem>\n        <Heading as=\"h2\" size=\"md\" pb={4}>\n          Projects\n        </Heading>\n        {maxIdeasAvailable === serializeNumber(0) ? (\n          <Text fontStyle=\"italic\" color=\"gray.400\">\n            Hire some researchers, and they might have an idea or two of how to improve your power grid.\n          </Text>\n        ) : (\n          <VStack align=\"stretch\" spacing={4}>\n            {researchProjects.map((researchProject) => {\n              if (purchasedResearchProjects.includes(researchProject.identifier)) {\n                return null;\n              }\n\n              if (\n                compare(maxIdeasAvailable, multiply(serializeNumber(0.75), researchProject.cost)) === -1 ||\n                !hasRequiredResearchProjects(researchProject, purchasedResearchProjects)\n              ) {\n                return null;\n              }\n\n              return (\n                <StackItem key={researchProject.identifier}>\n                  <Heading as=\"h3\" size=\"sm\" pb={1}>\n                    {researchProject.name}\n                  </Heading>\n                  <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n                    {researchProject.description}\n                  </Text>\n                  <Button\n                    onClick={() => dispatch(purchaseResearchProject(researchProject.identifier))}\n                    disabled={!canPurchaseResearchProject(ideasAvailable, researchProject, purchasedResearchProjects)}\n                  >\n                    Purchase for {formatStandardNumber(researchProject.cost)} ideas\n                  </Button>\n                </StackItem>\n              );\n            })}\n          </VStack>\n        )}\n      </StackItem>\n    </VStack>\n  );\n};\n\nexport default ResearchTab;\n","import * as React from \"react\";\nimport { useColorMode, useColorModeValue, IconButtonProps, Button } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"Switch to Dark Mode\", \"Switch to Light Mode\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <Button leftIcon={<SwitchIcon />} onClick={toggleColorMode}>\n      {text}\n    </Button>\n  );\n};\n","import { GameState } from \"../store/gameSlice\";\n\nexport const serializeGameState = (gameState: GameState): string => {\n  return btoa(JSON.stringify(gameState));\n};\n\nexport const deserializeGameState = (serializedState: string): GameState | undefined => {\n  try {\n    return JSON.parse(atob(serializedState));\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveGameState = (gameState: GameState): void => {\n  localStorage.setItem(\"gameSave\", serializeGameState(gameState));\n};\n\nexport const loadGameState = (): GameState | undefined => {\n  const savedState = localStorage.getItem(\"gameSave\");\n  if (savedState) {\n    return deserializeGameState(savedState);\n  } else {\n    return undefined;\n  }\n};\n","import { Box, Button, chakra, Textarea, useClipboard } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { serializeGameState } from \"../../lib/gameStateSaves\";\nimport { selectGameState } from \"../../store/gameSlice\";\nimport { useAppSelector } from \"../../store/hooks\";\n\ntype Props = {};\n\nconst ExportedGameState: React.FunctionComponent<Props> = (props) => {\n  const [exportedGameState, setExportedGameState] = useState<string>(\"\");\n  const gameState = useAppSelector(selectGameState);\n  const { hasCopied, onCopy } = useClipboard(exportedGameState);\n\n  useEffect(() => {\n    setExportedGameState(serializeGameState(gameState));\n    // Only update the exported game state when this component is initially rendered. Intentionally leave out\n    // gameState as a dependency.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setExportedGameState]);\n\n  return (\n    <Box {...props} position=\"relative\">\n      <Textarea readOnly value={exportedGameState} height={250} />\n      <Button\n        onClick={onCopy}\n        variant=\"solid\"\n        colorScheme=\"teal\"\n        size=\"xs\"\n        textTransform=\"uppercase\"\n        position=\"absolute\"\n        zIndex={1}\n        top={3}\n        right={6}\n      >\n        {hasCopied ? \"Copied!\" : \"Copy\"}\n      </Button>\n    </Box>\n  );\n};\n\nexport default chakra(ExportedGameState);\n","import { Box, Button, chakra, Textarea, useToast } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deserializeGameState } from \"../../lib/gameStateSaves\";\nimport { resetGame } from \"../../store/gameSlice\";\n\nconst importWarningMessage =\n  \"This will overwrite all of your current save data, and cannot be undone. Are you sure you want to continue?\";\n\ntype Props = {};\n\nconst ImportGameState: React.FunctionComponent<Props> = (props) => {\n  const [value, setValue] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const handleImport = () => {\n    if (window.confirm(importWarningMessage)) {\n      const parsedValue = deserializeGameState(value);\n\n      if (parsedValue) {\n        dispatch(resetGame(parsedValue));\n\n        toast({\n          title: \"Save Imported\",\n          description: \"Your game save has been imported successfully!\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n          position: \"top-right\",\n        });\n      } else {\n        toast({\n          title: \"Import Failed\",\n          description: \"Importing the game save failed. Check that you have entered the entire game state.\",\n          status: \"error\",\n          duration: 9000,\n          isClosable: true,\n          position: \"top-right\",\n        });\n      }\n    }\n  };\n\n  return (\n    <Box {...props}>\n      <Textarea value={value} onChange={(event) => setValue(event.target.value)} />\n      <Button mt={2} onClick={handleImport} disabled={!value}>\n        Import Data\n      </Button>\n    </Box>\n  );\n};\n\nexport default chakra(ImportGameState);\n","import { Button, ButtonProps } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { saveGameState } from \"../../lib/gameStateSaves\";\nimport { selectGameState } from \"../../store/gameSlice\";\nimport { useAppSelector } from \"../../store/hooks\";\n\nconst ManualSaveButton: React.FunctionComponent<ButtonProps> = (props) => {\n  const gameState = useAppSelector(selectGameState);\n\n  const handleSave = () => {\n    saveGameState(gameState);\n  };\n\n  return (\n    <Button {...props} onClick={handleSave}>\n      Save\n    </Button>\n  );\n};\n\nexport default ManualSaveButton;\n","import { Button, Heading, HStack, Select, StackItem, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { selectTicksPerDay, updateTicksPerDay, resetGame } from \"../store/gameSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { ColorModeSwitcher } from \"./SettingsTab/ColorModeSwitcher\";\nimport ExportedGameState from \"./SettingsTab/ExportedGameState\";\nimport ImportGameState from \"./SettingsTab/ImportGameState\";\nimport ManualSaveButton from \"./SettingsTab/ManualSaveButton\";\n\nconst resetWarning =\n  \"This will reset all of your progress with no benefit, and cannot be undone. Are you sure you want to continue?\";\n\ntype Props = {};\n\nconst SettingsTab: React.FunctionComponent<Props> = (props) => {\n  const [showExportedGameState, setShowExportedGameState] = useState(false);\n  const [showImportGameState, setShowImportGameState] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const ticksPerDay = useAppSelector(selectTicksPerDay);\n\n  const toggleShowExportedGameState = () => {\n    setShowImportGameState(false);\n    setShowExportedGameState(!showExportedGameState);\n  };\n\n  const toggleShowImportameState = () => {\n    setShowExportedGameState(false);\n    setShowImportGameState(!showImportGameState);\n  };\n\n  const handleResetSession = () => {\n    if (window.confirm(resetWarning)) {\n      dispatch(resetGame());\n    }\n  };\n\n  return (\n    <VStack align=\"flex-start\" spacing={8}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={2}>\n          Theme\n        </Heading>\n        <ColorModeSwitcher />\n      </StackItem>\n\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={2}>\n          Manual Game Saves\n        </Heading>\n        <HStack spacing={4}>\n          <ManualSaveButton />\n          <Button onClick={toggleShowExportedGameState}>Export Game Save</Button>\n          <Button onClick={toggleShowImportameState}>Import Game Save</Button>\n          <Button onClick={handleResetSession}>Reset</Button>\n        </HStack>\n        {showExportedGameState && <ExportedGameState mt={4} />}\n        {showImportGameState && <ImportGameState mt={4} />}\n      </StackItem>\n\n      {process.env.NODE_ENV !== \"production\" && (\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={2}>\n            Ticks per Second (Development Mode)\n          </Heading>\n\n          <Select\n            placeholder=\"Select option\"\n            value={ticksPerDay}\n            onChange={(event) => dispatch(updateTicksPerDay(parseInt(event.target.value, 10)))}\n          >\n            <option value={1}>1</option>\n            <option value={2}>2</option>\n            <option value={4}>4</option>\n            <option value={8}>8</option>\n            <option value={16}>16</option>\n          </Select>\n        </StackItem>\n      )}\n    </VStack>\n  );\n};\n\nexport default SettingsTab;\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AchievementsTab from \"../components/AchievementsTab\";\nimport GenerationTab from \"../components/GenerationTab\";\nimport ResearchTab from \"../components/ResearchTab\";\nimport SettingsTab from \"../components/SettingsTab\";\n\ntype Props = {};\n\nconst ContentPane: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>Generation</Tab>\n        <Tab>Research</Tab>\n        <Tab>Achievements</Tab>\n        <Tab>Settings</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <GenerationTab />\n        </TabPanel>\n        <TabPanel>\n          <ResearchTab />\n        </TabPanel>\n        <TabPanel>\n          <AchievementsTab />\n        </TabPanel>\n        <TabPanel>\n          <SettingsTab />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nexport default ContentPane;\n","import { useInterval } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { saveGameState } from \"../lib/gameStateSaves\";\nimport { selectGameState } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst GameAutosaver: React.FunctionComponent<Props> = (props) => {\n  const gameState = useAppSelector(selectGameState);\n\n  useInterval(() => {\n    saveGameState(gameState);\n  }, 30 * 1000);\n\n  return null;\n};\n\nexport default GameAutosaver;\n","import React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { ChakraProvider, Box, theme, Flex, Divider } from \"@chakra-ui/react\";\nimport SummaryPane from \"./SummaryPane\";\nimport ContentPane from \"./ContentPane\";\nimport store from \"../store/store\";\nimport GameAutosaver from \"../components/GameAutosaver\";\n\nconst App: React.FunctionComponent = () => (\n  <ReduxProvider store={store}>\n    <ChakraProvider theme={theme}>\n      <GameAutosaver />\n\n      <Box>\n        <Flex minH=\"100vh\" direction=\"row\" alignItems=\"stretch\">\n          <Box overflow=\"auto\" w={250} p={3}>\n            <SummaryPane />\n          </Box>\n          <Box>\n            <Divider orientation=\"vertical\" />\n          </Box>\n          <Box flexGrow={1} overflow=\"auto\">\n            <ContentPane />\n          </Box>\n        </Flex>\n      </Box>\n    </ChakraProvider>\n  </ReduxProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}