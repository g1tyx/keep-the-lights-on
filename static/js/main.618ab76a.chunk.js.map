{"version":3,"sources":["layout/SummaryPane.tsx","components/AchievementsTab.tsx","components/GenerationTab.tsx","components/ResearchTab.tsx","components/SettingsTab/ColorModeSwitcher.tsx","components/SettingsTab.tsx","layout/ContentPane.tsx","layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["SummaryPane","props","as","size","pb","pt","align","spacing","fontSize","color","AchievementsTab","GenerationTab","ResearchTab","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","variant","marginLeft","onClick","icon","aria-label","SettingsTab","ContentPane","App","theme","minH","direction","alignItems","overflow","w","p","orientation","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.618ab76a.chunk.js","sourcesContent":["import { Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst SummaryPane: React.FunctionComponent<Props> = (props) => {\n  return (\n    <>\n      <Heading as=\"h1\" size=\"md\" pb={2}>\n        Keep the Lights On\n      </Heading>\n      <VStack pt={4} align=\"stretch\" spacing={4}>\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Power Generation\n          </Heading>\n          <Text>10 kWh</Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Houses Illuminated\n          </Heading>\n          <Text pb={1}>1 / 1</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            100%\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Funds\n          </Heading>\n          <Text pb={1}>$1000</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            $10 / s\n          </Text>\n        </StackItem>\n      </VStack>\n    </>\n  );\n};\n\nexport default SummaryPane;\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst AchievementsTab: React.FunctionComponent<Props> = (props) => {\n  return <Box>Track your progress here</Box>;\n};\n\nexport default AchievementsTab;\n","import { Button, Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst GenerationTab: React.FunctionComponent<Props> = (props) => {\n  return (\n    <VStack align=\"stretch\" spacing={4}>\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={1}>\n          Candles x 5\n        </Heading>\n        <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n          Lights up a single room.\n        </Text>\n        <Button>Buy 1 for $5</Button>\n      </StackItem>\n\n      <StackItem>\n        <Heading as=\"h2\" size=\"sm\" pb={1}>\n          Hamster Wheels x 10\n        </Heading>\n        <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n          Watch those little legs go!\n        </Text>\n        <Button>Buy 1 for $10</Button>\n      </StackItem>\n    </VStack>\n  );\n};\n\nexport default GenerationTab;\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst ResearchTab: React.FunctionComponent<Props> = (props) => {\n  return <Box>Let's research some things!</Box>;\n};\n\nexport default ResearchTab;\n","import * as React from \"react\";\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ColorModeSwitcher } from \"./SettingsTab/ColorModeSwitcher\";\n\ntype Props = {};\n\nconst SettingsTab: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Box>\n      Update your settings\n      <ColorModeSwitcher />\n    </Box>\n  );\n};\n\nexport default SettingsTab;\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AchievementsTab from \"../components/AchievementsTab\";\nimport GenerationTab from \"../components/GenerationTab\";\nimport ResearchTab from \"../components/ResearchTab\";\nimport SettingsTab from \"../components/SettingsTab\";\n\ntype Props = {};\n\nconst ContentPane: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>Generation</Tab>\n        <Tab>Research</Tab>\n        <Tab>Achievements</Tab>\n        <Tab>Settings</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <GenerationTab />\n        </TabPanel>\n        <TabPanel>\n          <ResearchTab />\n        </TabPanel>\n        <TabPanel>\n          <AchievementsTab />\n        </TabPanel>\n        <TabPanel>\n          <SettingsTab />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nexport default ContentPane;\n","import React from \"react\";\nimport { ChakraProvider, Box, theme, Flex, Divider } from \"@chakra-ui/react\";\nimport SummaryPane from \"./SummaryPane\";\nimport ContentPane from \"./ContentPane\";\n\nexport const App: React.FunctionComponent = () => (\n  <ChakraProvider theme={theme}>\n    <Box>\n      <Flex minH=\"100vh\" direction=\"row\" alignItems=\"stretch\">\n        <Box overflow=\"auto\" w={250} p={3}>\n          <SummaryPane />\n        </Box>\n        <Box>\n          <Divider orientation=\"vertical\" />\n        </Box>\n        <Box flexGrow={1} overflow=\"auto\">\n          <ContentPane />\n        </Box>\n      </Flex>\n    </Box>\n  </ChakraProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}