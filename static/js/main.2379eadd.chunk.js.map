{"version":3,"sources":["lib/Generators.ts","lib/SerializeableBigNumber.ts","lib/CurrentStatistics.ts","store/gameSlice.ts","store/hooks.ts","layout/SummaryPane.tsx","components/AchievementsTab.tsx","components/GenerationTab.tsx","components/ResearchTab.tsx","components/SettingsTab/ColorModeSwitcher.tsx","components/SettingsTab.tsx","layout/ContentPane.tsx","store/store.ts","layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["GeneratorType","toDecimal","serialized","Decimal","fromMantissaExponent","man","exp","serializeNumber","value","decimalValue","mantissa","exponent","add","a","b","multiply","divide","min","compare","formatSerializeableBigNumber","toString","generatorDescriptions","hamsters","name","colorText","baseCost","costOfNthGenerator","n","pinwheels","bicycle","generatorTypes","Object","keys","sort","defaultGeneratorsState","numberOwned","wattsPerDay","nextPurchaseCost","canPurchaseGenerator","cashAvailable","generator","defaultCurrentStatistics","daysElapsed","ticksPerDay","maxCashAvailable","cashEarnedPerDay","homesPowered","homesInPowerGrid","wattsUsedPerHomePerDay","pricePerWatt","wattsGeneratedPerDay","getNextCurrentStatistics","currentStatistics","tickCounter","getNextDaysElapsed","wattsConsumedPerDay","getNextCashAvailable","max","updateStatisticsOnGeneratorPurchase","purchaseCost","generators","subtract","values","reduce","acc","calculateWattsGenerated","initialState","gameSlice","createSlice","reducers","tick","state","action","payload","buyGenerator","generatorType","purchaseGenerator","actions","selectGenerators","game","selectCurrentStatistics","selectCashAvailable","selectMaxCashAvailable","useAppSelector","useSelector","SummaryPane","props","as","size","pb","pt","align","spacing","fontSize","color","AchievementsTab","GenerationTab","dispatch","useDispatch","map","generatorDescription","onClick","disabled","ResearchTab","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","variant","marginLeft","icon","aria-label","SettingsTab","ContentPane","store","configureStore","reducer","setInterval","App","theme","minH","direction","alignItems","overflow","w","p","orientation","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2379eadd.chunk.js","sourcesContent":["import { add, compare, multiply, SerializeableBigNumber, serializeNumber } from \"./SerializeableBigNumber\";\n\nexport enum GeneratorType {\n  hamsters = \"hamsters\",\n  pinwheels = \"pinwheels\",\n  bicycle = \"bicycle\",\n}\n\nexport type GeneratorDescription = {\n  name: string;\n  colorText: string;\n  baseCost: SerializeableBigNumber;\n  costOfNthGenerator: (n: number) => SerializeableBigNumber;\n};\n\nexport type GeneratorDescriptions = {\n  [key in GeneratorType]: GeneratorDescription;\n};\n\nexport const generatorDescriptions: GeneratorDescriptions = {\n  hamsters: {\n    name: \"Hamster\",\n    colorText: \"Watch those little legs go!\",\n    baseCost: serializeNumber(0.25),\n    costOfNthGenerator: (n) => serializeNumber(n * 0.25),\n  },\n  pinwheels: {\n    name: \"Pinwheel\",\n    colorText: \"One day you'll build a great wind farm.\",\n    baseCost: serializeNumber(2),\n    costOfNthGenerator: (n) => serializeNumber(n * 2),\n  },\n  bicycle: {\n    name: \"Human-powered Bicycle\",\n    colorText: \"You can make it up the hill, just keep pedaling!\",\n    baseCost: serializeNumber(20),\n    costOfNthGenerator: (n) => serializeNumber((n - 1) * 5 + 20),\n  },\n};\n\nexport const generatorTypes = Object.keys(GeneratorType).sort((a, b) =>\n  compare(generatorDescriptions[a as GeneratorType].baseCost, generatorDescriptions[b as GeneratorType].baseCost),\n) as Array<GeneratorType>;\n\nexport type GeneratorState = {\n  numberOwned: number;\n  wattsPerDay: SerializeableBigNumber;\n  nextPurchaseCost: SerializeableBigNumber;\n};\n\nexport type GeneratorsState = {\n  [key in GeneratorType]: GeneratorState;\n};\n\nexport const defaultGeneratorsState: GeneratorsState = {\n  hamsters: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(0.5),\n    nextPurchaseCost: generatorDescriptions.hamsters.baseCost,\n  },\n  pinwheels: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(2),\n    nextPurchaseCost: generatorDescriptions.pinwheels.baseCost,\n  },\n  bicycle: {\n    numberOwned: 0,\n    wattsPerDay: serializeNumber(10),\n    nextPurchaseCost: generatorDescriptions.pinwheels.baseCost,\n  },\n};\n\nexport const canPurchaseGenerator = (cashAvailable: SerializeableBigNumber, generator: GeneratorState): boolean =>\n  compare(cashAvailable, generator.nextPurchaseCost) !== -1;\n\nexport const purchaseGenerator = (generatorType: GeneratorType, generator: GeneratorState): GeneratorState => {\n  const { numberOwned } = generator;\n\n  const nextPurchaseCost = generatorDescriptions[generatorType].costOfNthGenerator(numberOwned + 2);\n\n  return {\n    ...generator,\n    numberOwned: numberOwned + 1,\n    nextPurchaseCost,\n  };\n};\n\nexport const calculateWattsGenerated = (generators: GeneratorsState): SerializeableBigNumber =>\n  Object.values(generators).reduce(\n    (acc, generator) => add(acc, multiply(serializeNumber(generator.numberOwned), generator.wattsPerDay)),\n    serializeNumber(0),\n  );\n","import Decimal, { DecimalSource } from \"break_infinity.js\";\n\nexport type SerializeableBigNumber = {\n  man: number;\n  exp: number;\n};\n\nconst toDecimal = (serialized: SerializeableBigNumber): Decimal =>\n  Decimal.fromMantissaExponent(serialized.man, serialized.exp);\n\nexport const serializeNumber = (value: DecimalSource): SerializeableBigNumber => {\n  const decimalValue = new Decimal(value);\n\n  return {\n    man: decimalValue.mantissa,\n    exp: decimalValue.exponent,\n  };\n};\n\nexport const add = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.add(toDecimal(a), toDecimal(b)));\n\nexport const subtract = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.subtract(toDecimal(a), toDecimal(b)));\n\nexport const multiply = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.multiply(toDecimal(a), toDecimal(b)));\n\nexport const divide = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.divide(toDecimal(a), toDecimal(b)));\n\nexport const max = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.max(toDecimal(a), toDecimal(b)));\n\nexport const min = (a: SerializeableBigNumber, b: SerializeableBigNumber): SerializeableBigNumber =>\n  serializeNumber(Decimal.min(toDecimal(a), toDecimal(b)));\n\nexport const compare = (a: SerializeableBigNumber, b: SerializeableBigNumber): number =>\n  Decimal.compare(toDecimal(a), toDecimal(b));\n\nexport const formatSerializeableBigNumber = (a: SerializeableBigNumber): string => toDecimal(a).toString();\n","import { calculateWattsGenerated, GeneratorsState } from \"./Generators\";\nimport {\n  SerializeableBigNumber,\n  serializeNumber,\n  add,\n  multiply,\n  divide,\n  min,\n  max,\n  subtract,\n} from \"./SerializeableBigNumber\";\n\nexport type CurrentStatistics = {\n  daysElapsed: SerializeableBigNumber;\n  ticksPerDay: number;\n\n  cashAvailable: SerializeableBigNumber;\n  maxCashAvailable: SerializeableBigNumber;\n  cashEarnedPerDay: SerializeableBigNumber;\n\n  homesPowered: SerializeableBigNumber;\n  homesInPowerGrid: SerializeableBigNumber;\n  wattsUsedPerHomePerDay: SerializeableBigNumber;\n\n  pricePerWatt: SerializeableBigNumber;\n  wattsGeneratedPerDay: SerializeableBigNumber;\n};\n\nexport const defaultCurrentStatistics: CurrentStatistics = {\n  daysElapsed: serializeNumber(0),\n  ticksPerDay: 8,\n\n  cashAvailable: serializeNumber(1),\n  maxCashAvailable: serializeNumber(0),\n  cashEarnedPerDay: serializeNumber(0),\n\n  homesPowered: serializeNumber(0),\n  homesInPowerGrid: serializeNumber(1),\n  wattsUsedPerHomePerDay: serializeNumber(20),\n\n  pricePerWatt: serializeNumber(0.03),\n  wattsGeneratedPerDay: serializeNumber(0),\n};\n\nconst getNextDaysElapsed = (currentStatistics: CurrentStatistics, tickCounter: number): SerializeableBigNumber => {\n  const { daysElapsed, ticksPerDay } = currentStatistics;\n\n  if (tickCounter % ticksPerDay === 0) {\n    return add(daysElapsed, serializeNumber(1));\n  } else {\n    return daysElapsed;\n  }\n};\n\nconst getNextCashAvailable = (currentStatistics: CurrentStatistics): SerializeableBigNumber => {\n  const {\n    ticksPerDay,\n    cashAvailable,\n    homesInPowerGrid,\n    wattsUsedPerHomePerDay,\n    pricePerWatt,\n    wattsGeneratedPerDay,\n  } = currentStatistics;\n\n  const wattsConsumedPerDay = min(wattsGeneratedPerDay, multiply(homesInPowerGrid, wattsUsedPerHomePerDay));\n  const cashEarnedPerDay = multiply(wattsConsumedPerDay, pricePerWatt);\n\n  return add(cashAvailable, divide(cashEarnedPerDay, serializeNumber(ticksPerDay)));\n};\n\nexport const getNextCurrentStatistics = (\n  currentStatistics: CurrentStatistics,\n  tickCounter: number,\n): CurrentStatistics => {\n  const daysElapsed = getNextDaysElapsed(currentStatistics, tickCounter);\n\n  const cashAvailable = getNextCashAvailable(currentStatistics);\n  const maxCashAvailable = max(cashAvailable, currentStatistics.maxCashAvailable);\n\n  return {\n    ...currentStatistics,\n    daysElapsed,\n    cashAvailable,\n    maxCashAvailable,\n  };\n};\n\nexport const updateStatisticsOnGeneratorPurchase = (\n  currentStatistics: CurrentStatistics,\n  purchaseCost: SerializeableBigNumber,\n  generators: GeneratorsState,\n): CurrentStatistics => {\n  const cashAvailable = subtract(currentStatistics.cashAvailable, purchaseCost);\n  const wattsGeneratedPerDay = calculateWattsGenerated(generators);\n  const wattsConsumedPerDay = min(\n    wattsGeneratedPerDay,\n    multiply(currentStatistics.homesInPowerGrid, currentStatistics.wattsUsedPerHomePerDay),\n  );\n  const cashEarnedPerDay = multiply(wattsConsumedPerDay, currentStatistics.pricePerWatt);\n  const homesPowered = min(\n    currentStatistics.homesInPowerGrid,\n    divide(wattsGeneratedPerDay, currentStatistics.wattsUsedPerHomePerDay),\n  );\n\n  return { ...currentStatistics, cashAvailable, cashEarnedPerDay, homesPowered, wattsGeneratedPerDay };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  getNextCurrentStatistics,\n  CurrentStatistics,\n  defaultCurrentStatistics,\n  updateStatisticsOnGeneratorPurchase,\n} from \"../lib/CurrentStatistics\";\nimport {\n  canPurchaseGenerator,\n  defaultGeneratorsState,\n  GeneratorsState,\n  GeneratorType,\n  purchaseGenerator,\n} from \"../lib/Generators\";\nimport { RootState } from \"./store\";\n\nexport interface GameState {\n  currentStatistics: CurrentStatistics;\n  generators: GeneratorsState;\n}\n\nconst initialState: GameState = {\n  currentStatistics: defaultCurrentStatistics,\n  generators: defaultGeneratorsState,\n};\n\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    tick: (state, action: PayloadAction<number>) => {\n      state.currentStatistics = getNextCurrentStatistics(state.currentStatistics, action.payload);\n    },\n\n    buyGenerator: (state, action: PayloadAction<GeneratorType>) => {\n      const generatorType = action.payload;\n\n      const { currentStatistics, generators } = state;\n      const cashAvailable = currentStatistics.cashAvailable;\n      const generator = generators[generatorType];\n\n      if (canPurchaseGenerator(cashAvailable, generator)) {\n        const purchaseCost = generator.nextPurchaseCost;\n\n        state.generators[generatorType] = purchaseGenerator(generatorType, generator);\n        state.currentStatistics = updateStatisticsOnGeneratorPurchase(currentStatistics, purchaseCost, generators);\n      }\n    },\n  },\n});\n\nexport const { tick, buyGenerator } = gameSlice.actions;\n\nexport const selectGenerator = (generator: GeneratorType) => (state: RootState) => state.game.generators[generator];\nexport const selectGenerators = (state: RootState) => state.game.generators;\n\nexport const selectCurrentStatistics = (state: RootState) => state.game.currentStatistics;\nexport const selectCashAvailable = (state: RootState) => state.game.currentStatistics.cashAvailable;\nexport const selectMaxCashAvailable = (state: RootState) => state.game.currentStatistics.maxCashAvailable;\n\nexport default gameSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { formatSerializeableBigNumber } from \"../lib/SerializeableBigNumber\";\nimport { selectCurrentStatistics } from \"../store/gameSlice\";\nimport { useAppSelector } from \"../store/hooks\";\n\ntype Props = {};\n\nconst SummaryPane: React.FunctionComponent<Props> = (props) => {\n  const currentStatistics = useAppSelector(selectCurrentStatistics);\n\n  const {\n    daysElapsed,\n    cashAvailable,\n    cashEarnedPerDay,\n    homesPowered,\n    homesInPowerGrid,\n    wattsUsedPerHomePerDay,\n    pricePerWatt,\n    wattsGeneratedPerDay,\n  } = currentStatistics;\n\n  return (\n    <>\n      <Heading as=\"h1\" size=\"md\" pb={2}>\n        Keep the Lights On\n      </Heading>\n      <VStack pt={4} align=\"stretch\" spacing={4}>\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Time Elapsed\n          </Heading>\n          <Text>{formatSerializeableBigNumber(daysElapsed)} days</Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Power Generation\n          </Heading>\n          <Text pb={1}>{formatSerializeableBigNumber(wattsGeneratedPerDay)} watts per day</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatSerializeableBigNumber(pricePerWatt)} per watt\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Houses Illuminated\n          </Heading>\n          <Text pb={1}>\n            {formatSerializeableBigNumber(homesPowered)} / {formatSerializeableBigNumber(homesInPowerGrid)}\n          </Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            {formatSerializeableBigNumber(wattsUsedPerHomePerDay)} watts used per house per day\n          </Text>\n        </StackItem>\n\n        <StackItem>\n          <Heading as=\"h2\" size=\"sm\" pb={1}>\n            Funds\n          </Heading>\n          <Text pb={1}>${formatSerializeableBigNumber(cashAvailable)}</Text>\n          <Text fontSize=\"sm\" color=\"gray.400\">\n            ${formatSerializeableBigNumber(cashEarnedPerDay)} per day\n          </Text>\n        </StackItem>\n      </VStack>\n    </>\n  );\n};\n\nexport default SummaryPane;\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst AchievementsTab: React.FunctionComponent<Props> = (props) => {\n  return <Box>Track your progress here</Box>;\n};\n\nexport default AchievementsTab;\n","import { Button, Heading, StackItem, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { canPurchaseGenerator, generatorDescriptions, generatorTypes } from \"../lib/Generators\";\nimport { compare, formatSerializeableBigNumber, multiply, serializeNumber } from \"../lib/SerializeableBigNumber\";\nimport { buyGenerator, selectCashAvailable, selectGenerators, selectMaxCashAvailable } from \"../store/gameSlice\";\nimport { useAppSelector, useAppDispatch } from \"../store/hooks\";\n\ntype Props = {};\n\nconst GenerationTab: React.FunctionComponent<Props> = (props) => {\n  const dispatch = useAppDispatch();\n  const cashAvailable = useAppSelector(selectCashAvailable);\n  const maxCashAvailable = useAppSelector(selectMaxCashAvailable);\n  const generators = useAppSelector(selectGenerators);\n\n  return (\n    <VStack align=\"stretch\" spacing={4}>\n      {generatorTypes.map((generatorType) => {\n        const generator = generators[generatorType];\n        const generatorDescription = generatorDescriptions[generatorType];\n\n        if (compare(maxCashAvailable, multiply(serializeNumber(0.75), generatorDescription.baseCost)) === -1) {\n          return null;\n        }\n\n        return (\n          <StackItem key={generatorType}>\n            <Heading as=\"h2\" size=\"sm\" pb={1}>\n              {generatorDescription.name} x {generator.numberOwned}\n            </Heading>\n            <Text pb={2} fontSize=\"sm\" color=\"gray.400\">\n              Generates {formatSerializeableBigNumber(generator.wattsPerDay)} watts per day --{\" \"}\n              {generatorDescription.colorText}\n            </Text>\n            <Button\n              onClick={() => dispatch(buyGenerator(generatorType))}\n              disabled={!canPurchaseGenerator(cashAvailable, generator)}\n            >\n              Buy for ${formatSerializeableBigNumber(generator.nextPurchaseCost)}\n            </Button>\n          </StackItem>\n        );\n      })}\n    </VStack>\n  );\n};\n\nexport default GenerationTab;\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {};\n\nconst ResearchTab: React.FunctionComponent<Props> = (props) => {\n  return <Box>Let's research some things!</Box>;\n};\n\nexport default ResearchTab;\n","import * as React from \"react\";\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ColorModeSwitcher } from \"./SettingsTab/ColorModeSwitcher\";\n\ntype Props = {};\n\nconst SettingsTab: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Box>\n      Update your settings\n      <ColorModeSwitcher />\n    </Box>\n  );\n};\n\nexport default SettingsTab;\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AchievementsTab from \"../components/AchievementsTab\";\nimport GenerationTab from \"../components/GenerationTab\";\nimport ResearchTab from \"../components/ResearchTab\";\nimport SettingsTab from \"../components/SettingsTab\";\n\ntype Props = {};\n\nconst ContentPane: React.FunctionComponent<Props> = (props) => {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>Generation</Tab>\n        <Tab>Research</Tab>\n        <Tab>Achievements</Tab>\n        <Tab>Settings</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel>\n          <GenerationTab />\n        </TabPanel>\n        <TabPanel>\n          <ResearchTab />\n        </TabPanel>\n        <TabPanel>\n          <AchievementsTab />\n        </TabPanel>\n        <TabPanel>\n          <SettingsTab />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nexport default ContentPane;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { gameSlice, tick } from \"./gameSlice\";\n\nconst TICKS_PER_SECOND = 8;\n\nconst store = configureStore({\n  reducer: {\n    game: gameSlice.reducer,\n  },\n});\n\nlet tickCounter = 0;\nsetInterval(() => {\n  store.dispatch(tick(tickCounter));\n  tickCounter = (tickCounter + 1) % TICKS_PER_SECOND;\n}, 1000 / TICKS_PER_SECOND);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { ChakraProvider, Box, theme, Flex, Divider } from \"@chakra-ui/react\";\nimport SummaryPane from \"./SummaryPane\";\nimport ContentPane from \"./ContentPane\";\nimport store from \"../store/store\";\n\nconst App: React.FunctionComponent = () => (\n  <ReduxProvider store={store}>\n    <ChakraProvider theme={theme}>\n      <Box>\n        <Flex minH=\"100vh\" direction=\"row\" alignItems=\"stretch\">\n          <Box overflow=\"auto\" w={250} p={3}>\n            <SummaryPane />\n          </Box>\n          <Box>\n            <Divider orientation=\"vertical\" />\n          </Box>\n          <Box flexGrow={1} overflow=\"auto\">\n            <ContentPane />\n          </Box>\n        </Flex>\n      </Box>\n    </ChakraProvider>\n  </ReduxProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}